{"metadata":{"title":"Logging Sensor Data","categoryPathComponent":"MetaWear","role":"project","category":"MetaWear"},"hierarchy":{"modules":[{"reference":"doc:\/\/MetaWear\/tutorials\/MetaWear\/Discover-&-Connect","projects":[{"reference":"doc:\/\/MetaWear\/tutorials\/MetaWear\/Adding-MetaWear-to-a-Project","sections":[{"kind":"task","reference":"doc:\/\/MetaWear\/tutorials\/MetaWear\/Adding-MetaWear-to-a-Project#Swift-Package-Manager"},{"kind":"task","reference":"doc:\/\/MetaWear\/tutorials\/MetaWear\/Adding-MetaWear-to-a-Project#Add-MetaWear-and-MetaWearSync"}]},{"reference":"doc:\/\/MetaWear\/tutorials\/MetaWear\/Connecting-to-MetaWears","sections":[{"kind":"task","reference":"doc:\/\/MetaWear\/tutorials\/MetaWear\/Connecting-to-MetaWears#List-nearby-devices"},{"kind":"task","reference":"doc:\/\/MetaWear\/tutorials\/MetaWear\/Connecting-to-MetaWears#First-connection"},{"kind":"task","reference":"doc:\/\/MetaWear\/tutorials\/MetaWear\/Connecting-to-MetaWears#Managing-known-devices"}]}]},{"reference":"doc:\/\/MetaWear\/tutorials\/MetaWear\/Log-Sensor-Data","projects":[{"reference":"doc:\/\/MetaWear\/tutorials\/MetaWear\/Logging-Sensor-Data","sections":[{"kind":"task","reference":"doc:\/\/MetaWear\/tutorials\/MetaWear\/Logging-Sensor-Data#Configure-logging-commands"},{"kind":"task","reference":"doc:\/\/MetaWear\/tutorials\/MetaWear\/Logging-Sensor-Data#Download-data"}]}]},{"reference":"doc:\/\/MetaWear\/tutorials\/MetaWear\/Train-a-CoreML-Model","projects":[{"reference":"doc:\/\/MetaWear\/tutorials\/MetaWear\/Training-Activity-Classification","sections":[{"kind":"task","reference":"doc:\/\/MetaWear\/tutorials\/MetaWear\/Training-Activity-Classification#Forthcoming"}]},{"reference":"doc:\/\/MetaWear\/tutorials\/MetaWear\/Using-a-CoreML-Model","sections":[{"kind":"task","reference":"doc:\/\/MetaWear\/tutorials\/MetaWear\/Using-a-CoreML-Model#Forthcoming"}]}]}],"reference":"doc:\/\/MetaWear\/tutorials\/MetaWear","paths":[["doc:\/\/MetaWear\/tutorials\/MetaWear","doc:\/\/MetaWear\/tutorials\/MetaWear\/$volume","doc:\/\/MetaWear\/tutorials\/MetaWear\/Log-Sensor-Data"]]},"schemaVersion":{"major":0,"minor":1,"patch":0},"kind":"project","identifier":{"url":"doc:\/\/MetaWear\/tutorials\/MetaWear\/Logging-Sensor-Data","interfaceLanguage":"swift"},"sections":[{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Configure an arbitrary number of sensors for logging, exporting time-synced data as CSVs in a folder."}]}],"estimatedTimeInMinutes":5,"title":"Logging Sensor Data","image":"streamyIcon.png","chapter":"Log Sensor Data","kind":"hero","backgroundImage":"streamyIcon.png","projectFiles":"Streamy.zip"},{"kind":"tasks","tasks":[{"anchor":"Configure-logging-commands","title":"Configure logging commands","contentSection":[{"kind":"contentAndMedia","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Issue optional logging commands to a MetaWear."}]}],"mediaPosition":"trailing","media":"bird-rainbow.png"}],"stepsSection":[{"code":"03-recording-01-01.swift","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Gate buttons that issue commands to the MetaWear until the device is connected."}]}],"caption":[],"type":"step","runtimePreview":null,"media":null},{"code":"03-recording-01-02.swift","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Toggle preferred sensors by vending the Binding a SwiftUI toggle component requires."}]}],"caption":[{"type":"paragraph","inlineContent":[{"type":"text","text":"The accelerometer, gyroscope, and magnetometer can be logged either individually or in a fused mode, which enables logging Euler angles, quaternion, linear acceleration, or gravity."}]}],"type":"step","runtimePreview":null,"media":null},{"code":"03-recording-01-03.swift","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"MetaWear sensors can generate data at different rates and settings. This SDK organizes these parameters in a struct that you pass into operators like "},{"type":"codeVoice","code":"stream"},{"type":"text","text":", "},{"type":"codeVoice","code":"log"},{"type":"text","text":", and "},{"type":"codeVoice","code":"command"},{"type":"text","text":". You can  use code completion in those operators to find possible options, too."}]}],"caption":[{"type":"paragraph","inlineContent":[{"type":"text","text":"If you don’t know exactly which sensors a MetaWear is equipped with, or say if its Bosch accelerometer only records at a subset of frequencies, look at its MetaWearSync metadata or call "},{"type":"reference","isActive":true,"identifier":"doc:\/\/MetaWear\/documentation\/MetaWear\/MetaWear\/describeModules()"},{"type":"text","text":". Any exceptions are highlighted in documentation, throw Swift errors, or the SDK will handle for you. "},{"type":"emphasis","inlineContent":[{"type":"text","text":"MetaBase"}]},{"type":"text","text":" automatically restricts presented options based on legal parameters."}]}],"type":"step","runtimePreview":null,"media":null},{"code":"03-recording-01-04.swift","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"The "},{"type":"codeVoice","code":".optionallyLog"},{"type":"text","text":" operator will conditionally issue a "},{"type":"codeVoice","code":".log"},{"type":"text","text":" command for the provided sensor configuration."}]}],"caption":[{"type":"paragraph","inlineContent":[{"type":"text","text":"For an example of optional streaming commands, see the source code for "},{"type":"emphasis","inlineContent":[{"type":"text","text":"MetaBase"}]},{"type":"text","text":"."}]}],"type":"step","runtimePreview":null,"media":null},{"code":"03-recording-01-05.swift","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"If the command(s) issue without error, cache a timestamp. Later, when downloading data, the SDK uses an anchor date to align timestamps in exported CSV files. This is helpful to simultaneously log from multiple devices, as Bluetooth latency will cause logging to start unevenly."}]}],"caption":[{"type":"paragraph","inlineContent":[{"type":"emphasis","inlineContent":[{"type":"text","text":"Streamy"}]},{"type":"text","text":" is barebones, keeping this date in memory. "},{"type":"emphasis","inlineContent":[{"type":"text","text":"MetaBase"}]},{"type":"text","text":" persists this via iCloud."}]}],"type":"step","runtimePreview":null,"media":null}]},{"anchor":"Download-data","title":"Download data","contentSection":[{"kind":"contentAndMedia","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Collect logged data into CSV files."}]}],"mediaPosition":"trailing","media":"bird-gray-yellow.png"}],"stepsSection":[{"code":"03-recording-02-06.swift","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Issue the "},{"type":"codeVoice","code":"downloadLogs"},{"type":"text","text":" command using the cached start date. This pipeline will emit progress updates as percentages and, at 100%, also emit the collected data."}]}],"caption":[{"type":"paragraph","inlineContent":[{"type":"text","text":"This percentage is a rough estimate from counting flash storage pages. If the last page was only minimally filled with data, you’ll see progress leap to 100%."}]}],"type":"step","runtimePreview":null,"media":null},{"code":"03-recording-02-07.swift","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Once the download completes, translate the received array of "},{"type":"reference","isActive":true,"identifier":"doc:\/\/MetaWear\/documentation\/MetaWear\/MWDataTable"},{"type":"text","text":" into a CSV-formatted String by calling "},{"type":"reference","isActive":true,"identifier":"doc:\/\/MetaWear\/documentation\/MetaWear\/MWDataTable\/makeCSV(delimiter:)"},{"type":"text","text":"."}]}],"caption":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Use "},{"type":"reference","isActive":true,"identifier":"doc:\/\/MetaWear\/documentation\/MetaWear\/MWDataTable\/source"},{"type":"text","text":" for the sensor’s name or to reconstruct String-erased values into a concrete type. (The SDK’s "},{"type":"codeVoice","code":".stream"},{"type":"text","text":" command returns typed values.) The time-related columns and decimal digits of the output are customizable."}]}],"type":"step","runtimePreview":null,"media":null},{"code":null,"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Archive these CSVs as needed."}]}],"caption":[{"type":"paragraph","inlineContent":[{"type":"emphasis","inlineContent":[{"type":"text","text":"Streamy"}]},{"type":"text","text":" writes these files to a temp folder. A "},{"type":"codeVoice","code":"FileWrapper"},{"type":"text","text":" for that folder is embedded in a "},{"type":"codeVoice","code":"FileDocument"},{"type":"text","text":" to align with a SwiftUI API. "},{"type":"emphasis","inlineContent":[{"type":"text","text":"MetaBase"}]},{"type":"text","text":" archives the files to CoreData and iCloud and exports them using AppKit and UIKit APIs."}]}],"type":"step","runtimePreview":null,"media":null}]}]},{"action":{"overridingTitleInlineContent":[{"type":"text","text":"Get started"}],"isActive":true,"type":"reference","identifier":"doc:\/\/MetaWear\/tutorials\/MetaWear\/Training-Activity-Classification","overridingTitle":"Get started"},"featuredEyebrow":"Tutorial","kind":"callToAction","title":"Training Activity Classification","abstract":[{"type":"text","text":"Forthcoming."}]}],"references":{"doc://MetaWear/tutorials/MetaWear/Log-Sensor-Data":{"role":"article","title":"Log Sensor Data","abstract":[],"identifier":"doc:\/\/MetaWear\/tutorials\/MetaWear\/Log-Sensor-Data","kind":"article","type":"topic","url":"\/tutorials\/metawear\/log-sensor-data"},"doc://MetaWear/tutorials/MetaWear/Using-a-CoreML-Model":{"role":"project","title":"Using a CoreML Model","estimatedTime":"20min","abstract":[{"type":"text","text":"Forthcoming."}],"identifier":"doc:\/\/MetaWear\/tutorials\/MetaWear\/Using-a-CoreML-Model","kind":"project","type":"topic","url":"\/tutorials\/metawear\/using-a-coreml-model"},"doc://MetaWear/tutorials/MetaWear":{"role":"overview","title":"From Zero to Machine Learning","abstract":[{"type":"text","text":"Control MetaWear wearable sensors to classify movement. Let’s build "},{"type":"emphasis","inlineContent":[{"type":"text","text":"Streamy"}]},{"type":"text","text":", a barebones app using "},{"type":"codeVoice","code":"Swift"},{"type":"text","text":", "},{"type":"codeVoice","code":"Combine"},{"type":"text","text":", "},{"type":"codeVoice","code":"CoreML"},{"type":"text","text":", and "},{"type":"codeVoice","code":"SwiftUI"},{"type":"text","text":"."}],"identifier":"doc:\/\/MetaWear\/tutorials\/MetaWear","kind":"overview","type":"topic","url":"\/tutorials\/metawear"},"doc://MetaWear/documentation/MetaWear/MWDataTable/makeCSV(delimiter:)":{"role":"symbol","title":"makeCSV(delimiter:)","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"makeCSV"},{"kind":"text","text":"("},{"kind":"externalParam","text":"delimiter"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"String","preciseIdentifier":"s:SS"},{"kind":"text","text":") -> "},{"kind":"typeIdentifier","text":"String","preciseIdentifier":"s:SS"}],"abstract":[{"type":"text","text":"Make a CSV with a labeled header row, optionally with other delimiters like a pipe |"}],"identifier":"doc:\/\/MetaWear\/documentation\/MetaWear\/MWDataTable\/makeCSV(delimiter:)","kind":"symbol","type":"topic","url":"\/documentation\/metawear\/mwdatatable\/makecsv(delimiter:)"},"doc://MetaWear/tutorials/MetaWear/Logging-Sensor-Data#Configure-logging-commands":{"role":"pseudoSymbol","title":"Configure logging commands","abstract":[{"type":"text","text":"Configure an arbitrary number of sensors for logging, exporting time-synced data as CSVs in a folder."}],"identifier":"doc:\/\/MetaWear\/tutorials\/MetaWear\/Logging-Sensor-Data#Configure-logging-commands","kind":"section","type":"section","url":"\/tutorials\/metawear\/logging-sensor-data#Configure-logging-commands"},"doc://MetaWear/tutorials/MetaWear/Adding-MetaWear-to-a-Project":{"role":"project","title":"Adding MetaWear to a Project","estimatedTime":"5min","abstract":[{"type":"text","text":"This tutorial guides you through building "},{"type":"emphasis","inlineContent":[{"type":"text","text":"Streamy"}]},{"type":"text","text":", an app to capture and analyze motion sensor data."},{"type":"text","text":" "},{"type":"text","text":"You’ll start by adding the MetaWear SDK using Swift Package Manager and then link up dependencies."}],"identifier":"doc:\/\/MetaWear\/tutorials\/MetaWear\/Adding-MetaWear-to-a-Project","kind":"project","type":"topic","url":"\/tutorials\/metawear\/adding-metawear-to-a-project"},"doc://MetaWear/tutorials/MetaWear/Training-Activity-Classification":{"role":"project","title":"Training Activity Classification","estimatedTime":"20min","abstract":[{"type":"text","text":"Forthcoming."}],"identifier":"doc:\/\/MetaWear\/tutorials\/MetaWear\/Training-Activity-Classification","kind":"project","type":"topic","url":"\/tutorials\/metawear\/training-activity-classification"},"03-recording-02-07.swift":{"syntax":"swift","content":["class SensorLoggingController: ObservableObject {","","    @Published private(set) var state: State = .unknown","    private var startDate:             Date  = .init()","    private var downloadSub:           AnyCancellable? = nil","    ...","","    enum State: Equatable {","        case unknown","        case logging","        case downloading(Double)","        case downloaded","        case loggingError(String)","        case downloadError(String)","    }","}","","extension SensorLoggingController {","","    func download() {","        downloadSub = metawear","            .publishWhenConnected()","            .first()","            .downloadLogs(startDate: startDate)","            .handleEvents(receiveOutput: { [weak self] (_, percentComplete) in","                DispatchQueue.main.async { [weak self] in","                    self?.state = .downloading(percentComplete)","                }","            })","            .drop { $0.percentComplete < 1 }","            .sink { [weak self] completion in","                guard case let failure(error) = completion else { return }","                DispatchQueue.main.async { [weak self] in","                    self?.state = .downloadError(error.localizedDescription)","                }","            } receiveValue: { [weak self] (dataTables, percentComplete) in","                self?.prepareExportAndUpdateUI(for: dataTables)","            }","    }","}"],"fileName":"SensorLogging.swift","identifier":"03-recording-02-07.swift","type":"file","fileType":"swift","highlights":[{"line":12},{"line":14},{"line":30},{"line":31},{"line":32},{"line":33},{"line":34},{"line":35},{"line":36},{"line":37},{"line":38}]},"bird-gray-yellow.png":{"alt":"Bird art","type":"image","identifier":"bird-gray-yellow.png","variants":[{"url":"\/images\/bird-gray-yellow@1x.png","traits":["1x","light"]}]},"doc://MetaWear/tutorials/MetaWear/Connecting-to-MetaWears#Managing-known-devices":{"role":"pseudoSymbol","title":"Managing known devices","abstract":[{"type":"text","text":"Learn how "},{"type":"emphasis","inlineContent":[{"type":"text","text":"Streamy"}]},{"type":"text","text":" finds and manages both nearby and cloud-synced MetaWears."}],"identifier":"doc:\/\/MetaWear\/tutorials\/MetaWear\/Connecting-to-MetaWears#Managing-known-devices","kind":"section","type":"section","url":"\/tutorials\/metawear\/connecting-to-metawears#Managing-known-devices"},"streamyIcon.png":{"alt":"Streamy app icon","type":"image","identifier":"streamyIcon.png","variants":[{"url":"\/images\/streamyIcon@2x.png","traits":["2x","light"]}]},"Streamy.zip":{"checksum":"685fd06a76d72ed2f5663062b12da1a5db31bf221aaf21461557f448f689566844b9e978c508ff59346d8afed8ae3258e4fb37b1a9bf79f84ddc3fb4f5057946","type":"download","identifier":"Streamy.zip","url":"\/downloads\/Streamy.zip"},"doc://MetaWear/tutorials/MetaWear/Training-Activity-Classification#Forthcoming":{"role":"pseudoSymbol","title":"Forthcoming","abstract":[{"type":"text","text":"Forthcoming."}],"identifier":"doc:\/\/MetaWear\/tutorials\/MetaWear\/Training-Activity-Classification#Forthcoming","kind":"section","type":"section","url":"\/tutorials\/metawear\/training-activity-classification#Forthcoming"},"bird-rainbow.png":{"alt":"Bird art","type":"image","identifier":"bird-rainbow.png","variants":[{"url":"\/images\/bird-rainbow@1x.png","traits":["1x","light"]}]},"doc://MetaWear/tutorials/MetaWear/Logging-Sensor-Data#Download-data":{"role":"pseudoSymbol","title":"Download data","abstract":[{"type":"text","text":"Configure an arbitrary number of sensors for logging, exporting time-synced data as CSVs in a folder."}],"identifier":"doc:\/\/MetaWear\/tutorials\/MetaWear\/Logging-Sensor-Data#Download-data","kind":"section","type":"section","url":"\/tutorials\/metawear\/logging-sensor-data#Download-data"},"03-recording-01-01.swift":{"syntax":"swift","content":["class SensorLoggingController: ObservableObject {","","    @Published private(set) var enableCTAs:   Bool","    private var enableCTAsSub:                AnyCancellable? = nil","    let name: String","    private unowned let metawear: MetaWear","","    init(mac: MACAddress, sync: MetaWearSyncStore) {","        let (device, metadata) = sync.getDeviceAndMetadata(mac)!","        self.metawear = device!","        self.name = metadata.name","        self.enableCTAs = device?.connectionState == .connected","    }","}","","extension SensorLoggingController {","","    func onAppear() {","        metawear.connect()","","        enableCTAsSub = metawear.connectionStatePublisher","            .receive(on: DispatchQueue.main)","            .sink { [weak self] in self?.enableCTAs = $0 == .connected }","    }","}"],"fileName":"SensorLogging.swift","identifier":"03-recording-01-01.swift","type":"file","fileType":"swift","highlights":[{"line":3},{"line":4},{"line":12},{"line":21},{"line":22},{"line":23}]},"03-recording-01-02.swift":{"syntax":"swift","content":["class SensorLoggingController: ObservableObject {","","    @Published private(set) var selectedSensors: Set<MWNamedSignal> = []","    ...","}","","extension SensorLoggingController {","","    func toggleSensor(_ sensor: MWNamedSignal) -> Binding<Bool>  {","        Binding(","            get: { [weak self] in self?.selectedSensors.contains(sensor) == true },","            set: { [weak self] shouldUse in","                guard shouldUse else { self?.selectedSensors.remove(sensor); return }","                self?.selectedSensors.removeConflicts(for: sensor)","                self?.selectedSensors.insert(sensor)","            }","        )","    }","}"],"fileName":"SensorLogging.swift","identifier":"03-recording-01-02.swift","type":"file","fileType":"swift","highlights":[{"line":3},{"line":9},{"line":10},{"line":11},{"line":12},{"line":13},{"line":14},{"line":15},{"line":16},{"line":17},{"line":18}]},"03-recording-01-03.swift":{"syntax":"swift","content":["class SensorLoggingController: ObservableObject {","","    @Published private(set) var selectedSensors: Set<MWNamedSignal> = []","    private let accelerometerConfig = MWAccelerometer(rate: .hz100, gravity: .g16)","    private let gyroscopeConfig     = MWGyroscope(rate: .hz100, range: .dps2000)","    ...","}","","extension SensorLoggingController {","","}"],"fileName":"SensorLogging.swift","identifier":"03-recording-01-03.swift","type":"file","fileType":"swift","highlights":[{"line":4},{"line":5}]},"doc://MetaWear/tutorials/MetaWear/Connecting-to-MetaWears":{"role":"project","title":"Connecting to MetaWears","estimatedTime":"10min","abstract":[{"type":"text","text":"Learn how "},{"type":"emphasis","inlineContent":[{"type":"text","text":"Streamy"}]},{"type":"text","text":" finds and manages both nearby and cloud-synced MetaWears."}],"identifier":"doc:\/\/MetaWear\/tutorials\/MetaWear\/Connecting-to-MetaWears","kind":"project","type":"topic","url":"\/tutorials\/metawear\/connecting-to-metawears"},"doc://MetaWear/documentation/MetaWear/MWDataTable":{"role":"symbol","title":"MWDataTable","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"MWDataTable"}],"abstract":[{"type":"text","text":"Stringly-expressed data from any sensor, ready to export in CSV format."}],"identifier":"doc:\/\/MetaWear\/documentation\/MetaWear\/MWDataTable","kind":"symbol","type":"topic","navigatorTitle":[{"kind":"identifier","text":"MWDataTable"}],"url":"\/documentation\/metawear\/mwdatatable"},"doc://MetaWear/tutorials/MetaWear/Connecting-to-MetaWears#List-nearby-devices":{"role":"pseudoSymbol","title":"List nearby devices","abstract":[{"type":"text","text":"Learn how "},{"type":"emphasis","inlineContent":[{"type":"text","text":"Streamy"}]},{"type":"text","text":" finds and manages both nearby and cloud-synced MetaWears."}],"identifier":"doc:\/\/MetaWear\/tutorials\/MetaWear\/Connecting-to-MetaWears#List-nearby-devices","kind":"section","type":"section","url":"\/tutorials\/metawear\/connecting-to-metawears#List-nearby-devices"},"doc://MetaWear/tutorials/MetaWear/Adding-MetaWear-to-a-Project#Swift-Package-Manager":{"role":"pseudoSymbol","title":"Swift Package Manager","abstract":[{"type":"text","text":"This tutorial guides you through building "},{"type":"emphasis","inlineContent":[{"type":"text","text":"Streamy"}]},{"type":"text","text":", an app to capture and analyze motion sensor data."},{"type":"text","text":" "},{"type":"text","text":"You’ll start by adding the MetaWear SDK using Swift Package Manager and then link up dependencies."}],"identifier":"doc:\/\/MetaWear\/tutorials\/MetaWear\/Adding-MetaWear-to-a-Project#Swift-Package-Manager","kind":"section","type":"section","url":"\/tutorials\/metawear\/adding-metawear-to-a-project#Swift-Package-Manager"},"03-recording-02-06.swift":{"syntax":"swift","content":["class SensorLoggingController: ObservableObject {","","    @Published private(set) var state: State = .unknown","    private var startDate:             Date  = .init()","    private var downloadSub:           AnyCancellable? = nil","    ...","","    enum State: Equatable {","        case unknown","        case logging","        case downloading(Double)","        case loggingError(String)","    }","}","","extension SensorLoggingController {","","    func download() {","        downloadSub = metawear","            .publishWhenConnected()","            .first()","            .downloadLogs(startDate: startDate)","            .handleEvents(receiveOutput: { [weak self] (_, percentComplete) in","                DispatchQueue.main.async { [weak self] in","                    self?.state = .downloading(percentComplete)","                }","            })","        ...","    }","}"],"fileName":"SensorLogging.swift","identifier":"03-recording-02-06.swift","type":"file","fileType":"swift","highlights":[{"line":5},{"line":11},{"line":18},{"line":19},{"line":20},{"line":21},{"line":22},{"line":23},{"line":24},{"line":25},{"line":26},{"line":27},{"line":28},{"line":29}]},"doc://MetaWear/documentation/MetaWear/MetaWear/describeModules()":{"role":"symbol","title":"describeModules()","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"describeModules"},{"kind":"text","text":"() -> "},{"kind":"typeIdentifier","text":"MWPublisher","preciseIdentifier":"s:8MetaWear11MWPublishera"},{"kind":"text","text":"<["},{"kind":"typeIdentifier","text":"MWModules","preciseIdentifier":"s:8MetaWear9MWModulesO"},{"kind":"text","text":"."},{"kind":"typeIdentifier","text":"ID","preciseIdentifier":"s:8MetaWear9MWModulesO2IDO"},{"kind":"text","text":" : "},{"kind":"typeIdentifier","text":"MWModules","preciseIdentifier":"s:8MetaWear9MWModulesO"},{"kind":"text","text":"]>"}],"abstract":[{"type":"text","text":"Builds a dictionary of the board’s sensors and specifics on its sensors’ exact hardware. Useful when managing a MetaWear fleet with differing capabilities. (Requires connection.)"}],"identifier":"doc:\/\/MetaWear\/documentation\/MetaWear\/MetaWear\/describeModules()","kind":"symbol","type":"topic","url":"\/documentation\/metawear\/metawear\/describemodules()"},"03-recording-01-04.swift":{"syntax":"swift","content":["class SensorLoggingController: ObservableObject {","","    @Published private(set) var selectedSensors: Set<MWNamedSignal> = []","    private let accelerometerConfig = MWAccelerometer(rate: .hz100, gravity: .g16)","    private let gyroscopeConfig     = MWGyroscope(rate: .hz100, range: .dps2000)","    private var logSub:               AnyCancellable? = nil","    ...","}","","extension SensorLoggingController {","","    func log() {","        guard selectedSensors.isEmpty == false else { return }","","        logSub = metawear","            .publishWhenConnected()","            .first()","            .optionallyLog(selectedSensors.contains(.gyroscope) ? gyroscopeConfig : nil)","            .optionallyLog(selectedSensors.contains(.acceleration) ? accelerometerConfig : nil)","        ...","","        metawear.connect()","    }","}"],"fileName":"SensorLogging.swift","identifier":"03-recording-01-04.swift","type":"file","fileType":"swift","highlights":[{"line":6},{"line":12},{"line":13},{"line":14},{"line":15},{"line":16},{"line":17},{"line":18},{"line":19},{"line":20},{"line":21},{"line":22},{"line":23}]},"doc://MetaWear/tutorials/MetaWear/Adding-MetaWear-to-a-Project#Add-MetaWear-and-MetaWearSync":{"role":"pseudoSymbol","title":"Add MetaWear and MetaWearSync","abstract":[{"type":"text","text":"This tutorial guides you through building "},{"type":"emphasis","inlineContent":[{"type":"text","text":"Streamy"}]},{"type":"text","text":", an app to capture and analyze motion sensor data."},{"type":"text","text":" "},{"type":"text","text":"You’ll start by adding the MetaWear SDK using Swift Package Manager and then link up dependencies."}],"identifier":"doc:\/\/MetaWear\/tutorials\/MetaWear\/Adding-MetaWear-to-a-Project#Add-MetaWear-and-MetaWearSync","kind":"section","type":"section","url":"\/tutorials\/metawear\/adding-metawear-to-a-project#Add-MetaWear-and-MetaWearSync"},"doc://MetaWear/documentation/MetaWear/MWDataTable/source":{"role":"symbol","title":"source","fragments":[{"kind":"keyword","text":"let"},{"kind":"text","text":" "},{"kind":"identifier","text":"source"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"MWNamedSignal","preciseIdentifier":"s:8MetaWear13MWNamedSignalO"}],"abstract":[],"identifier":"doc:\/\/MetaWear\/documentation\/MetaWear\/MWDataTable\/source","kind":"symbol","type":"topic","url":"\/documentation\/metawear\/mwdatatable\/source"},"doc://MetaWear/tutorials/MetaWear/Discover-&-Connect":{"role":"article","title":"Discover & Connect","abstract":[],"identifier":"doc:\/\/MetaWear\/tutorials\/MetaWear\/Discover-&-Connect","kind":"article","type":"topic","url":"\/tutorials\/metawear\/discover-&-connect"},"doc://MetaWear/tutorials/MetaWear/Logging-Sensor-Data":{"role":"project","title":"Logging Sensor Data","estimatedTime":"5min","abstract":[{"type":"text","text":"Configure an arbitrary number of sensors for logging, exporting time-synced data as CSVs in a folder."}],"identifier":"doc:\/\/MetaWear\/tutorials\/MetaWear\/Logging-Sensor-Data","kind":"project","type":"topic","url":"\/tutorials\/metawear\/logging-sensor-data"},"doc://MetaWear/tutorials/MetaWear/Connecting-to-MetaWears#First-connection":{"role":"pseudoSymbol","title":"First connection","abstract":[{"type":"text","text":"Learn how "},{"type":"emphasis","inlineContent":[{"type":"text","text":"Streamy"}]},{"type":"text","text":" finds and manages both nearby and cloud-synced MetaWears."}],"identifier":"doc:\/\/MetaWear\/tutorials\/MetaWear\/Connecting-to-MetaWears#First-connection","kind":"section","type":"section","url":"\/tutorials\/metawear\/connecting-to-metawears#First-connection"},"doc://MetaWear/tutorials/MetaWear/Train-a-CoreML-Model":{"role":"article","title":"Train a CoreML Model","abstract":[],"identifier":"doc:\/\/MetaWear\/tutorials\/MetaWear\/Train-a-CoreML-Model","kind":"article","type":"topic","url":"\/tutorials\/metawear\/train-a-coreml-model"},"doc://MetaWear/tutorials/MetaWear/Using-a-CoreML-Model#Forthcoming":{"role":"pseudoSymbol","title":"Forthcoming","abstract":[{"type":"text","text":"Forthcoming."}],"identifier":"doc:\/\/MetaWear\/tutorials\/MetaWear\/Using-a-CoreML-Model#Forthcoming","kind":"section","type":"section","url":"\/tutorials\/metawear\/using-a-coreml-model#Forthcoming"},"03-recording-01-05.swift":{"syntax":"swift","content":["class SensorLoggingController: ObservableObject {","","    @Published private(set) var selectedSensors: Set<MWNamedSignal> = []","    private let accelerometerConfig = MWAccelerometer(rate: .hz100, gravity: .g16)","    private let gyroscopeConfig     = MWGyroscope(rate: .hz100, range: .dps2000)","    private var logSub:               AnyCancellable? = nil","    private var startDate:            Date","    ...","","    enum State: Equatable {","        case unknown","        case logging","        case loggingError(String)","    }","}","","extension SensorLoggingController {","","    func log() {","        guard selectedSensors.isEmpty == false else { return }","","        logSub = metawear","            .publishWhenConnected()","            .first()","            .optionallyLog(selectedSensors.contains(.gyroscope) ? gyroscopeConfig : nil)","            .optionallyLog(selectedSensors.contains(.acceleration) ? accelerometerConfig : nil)","            .receive(on: DispatchQueue.main)","            .sink { [weak self] completion in","                guard case let failure(error) = completion else { return }","                self?.state = .loggingError(error.localizedDescription)","            } receiveValue: { [weak self] _ in","                self?.state = .logging","                self?.startDate = .init()","            }","","        metawear.connect()","    }","}"],"fileName":"SensorLogging.swift","identifier":"03-recording-01-05.swift","type":"file","fileType":"swift","highlights":[{"line":7},{"line":9},{"line":10},{"line":11},{"line":12},{"line":13},{"line":14},{"line":27},{"line":28},{"line":29},{"line":30},{"line":31},{"line":32},{"line":33},{"line":34}]}}}