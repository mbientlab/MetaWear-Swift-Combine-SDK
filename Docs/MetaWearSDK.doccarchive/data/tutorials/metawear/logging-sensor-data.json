{"metadata":{"title":"Logging Sensor Data","categoryPathComponent":"MetaWear","role":"project","category":"MetaWear"},"hierarchy":{"modules":[{"reference":"doc:\/\/MetaWear\/tutorials\/MetaWear\/Discover-&-Connect","projects":[{"reference":"doc:\/\/MetaWear\/tutorials\/MetaWear\/Adding-MetaWear-to-a-Project","sections":[{"kind":"task","reference":"doc:\/\/MetaWear\/tutorials\/MetaWear\/Adding-MetaWear-to-a-Project#Whats-Ahead"},{"kind":"task","reference":"doc:\/\/MetaWear\/tutorials\/MetaWear\/Adding-MetaWear-to-a-Project#Swift-Package-Manager-&-Permissions"},{"kind":"task","reference":"doc:\/\/MetaWear\/tutorials\/MetaWear\/Adding-MetaWear-to-a-Project#The-Core-SDK-Classes"}]},{"reference":"doc:\/\/MetaWear\/tutorials\/MetaWear\/Connecting-to-MetaWears","sections":[{"kind":"task","reference":"doc:\/\/MetaWear\/tutorials\/MetaWear\/Connecting-to-MetaWears#List-nearby-devices"},{"kind":"task","reference":"doc:\/\/MetaWear\/tutorials\/MetaWear\/Connecting-to-MetaWears#First-connection"},{"kind":"task","reference":"doc:\/\/MetaWear\/tutorials\/MetaWear\/Connecting-to-MetaWears#Managing-known-devices"}]}]},{"reference":"doc:\/\/MetaWear\/tutorials\/MetaWear\/Log-Sensor-Data","projects":[{"reference":"doc:\/\/MetaWear\/tutorials\/MetaWear\/Logging-Sensor-Data","sections":[{"kind":"task","reference":"doc:\/\/MetaWear\/tutorials\/MetaWear\/Logging-Sensor-Data#To-Log-or-Download?"},{"kind":"task","reference":"doc:\/\/MetaWear\/tutorials\/MetaWear\/Logging-Sensor-Data#Configure-logging-commands"},{"kind":"task","reference":"doc:\/\/MetaWear\/tutorials\/MetaWear\/Logging-Sensor-Data#Download-data"}]}]},{"reference":"doc:\/\/MetaWear\/tutorials\/MetaWear\/Train-a-CoreML-Model","projects":[{"reference":"doc:\/\/MetaWear\/tutorials\/MetaWear\/Training-Activity-Classification","sections":[{"kind":"task","reference":"doc:\/\/MetaWear\/tutorials\/MetaWear\/Training-Activity-Classification#Collecting-Training-Data"}]},{"reference":"doc:\/\/MetaWear\/tutorials\/MetaWear\/Using-a-CoreML-Model","sections":[{"kind":"task","reference":"doc:\/\/MetaWear\/tutorials\/MetaWear\/Using-a-CoreML-Model#Forthcoming"}]}]}],"reference":"doc:\/\/MetaWear\/tutorials\/MetaWear","paths":[["doc:\/\/MetaWear\/tutorials\/MetaWear","doc:\/\/MetaWear\/tutorials\/MetaWear\/$volume","doc:\/\/MetaWear\/tutorials\/MetaWear\/Log-Sensor-Data"]]},"schemaVersion":{"major":0,"minor":1,"patch":0},"kind":"project","identifier":{"url":"doc:\/\/MetaWear\/tutorials\/MetaWear\/Logging-Sensor-Data","interfaceLanguage":"swift"},"sections":[{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Configure an arbitrary number of sensors for logging, exporting time-synced data as CSVs in a folder."}]}],"estimatedTimeInMinutes":15,"title":"Logging Sensor Data","image":"streamyIcon.png","chapter":"Log Sensor Data","kind":"hero","backgroundImage":"streamyIcon.png","projectFiles":"Streamy.zip"},{"kind":"tasks","tasks":[{"anchor":"To-Log-or-Download?","title":"To Log or Download?","contentSection":[{"kind":"contentAndMedia","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Create a UseCase detecting if the MetaWear flash storage contains any logged data, suggesting the relevant call to action."}]}],"mediaPosition":"trailing","media":"bird-rainbow.png"}],"stepsSection":[{"code":"03-recording-00-00.swift","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Issuing the "},{"type":"codeVoice","code":"logLength"},{"type":"text","text":" command returns the used flash storage in bytes, as counted by pages occupied."}]}],"caption":[{"type":"paragraph","inlineContent":[{"type":"text","text":"If no bytes are used, it’s time to start a new logging session. Otherwise, "},{"type":"emphasis","inlineContent":[{"type":"text","text":"Streamy"}]},{"type":"text","text":" should offer to download the data."}]}],"type":"step","runtimePreview":null,"media":null}]},{"anchor":"Configure-logging-commands","title":"Configure logging commands","contentSection":[{"kind":"contentAndMedia","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Create a UseCase that composes a logging session with a valid group of sensors and commands the MetaWear to start logging."}]}],"mediaPosition":"trailing","media":"bird-rainbow.png"}],"stepsSection":[{"code":"03-recording-01-00.swift","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"We’ll start with a MetaWear reference and metadata."}]}],"caption":[],"type":"step","runtimePreview":null,"media":null},{"code":"03-recording-01-01.swift","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"When a MetaWear logs its sensors, the activity is given an identifier String. The SDK catalogs these as "},{"type":"reference","isActive":true,"identifier":"doc:\/\/MetaWear\/documentation\/MetaWear\/MWNamedSignal"},{"type":"text","text":". We’ll use that enum as a rough-and-ready way to present options for logging."}]}],"caption":[{"type":"paragraph","inlineContent":[{"type":"emphasis","inlineContent":[{"type":"text","text":"Streamy"}]},{"type":"text","text":" will offer the accelerometer and gyroscope, plus two modes that fuse the accelerometer and gyroscope together."}]}],"type":"step","runtimePreview":null,"media":null},{"code":"","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"When fusing the accelerometer and gyroscope together, it’s not possible to log those sensors individually. We’ll ask the SDK for some logic to ensure our updates to the Set keeps the two fused modes exclusive to logging individual sensors (and another fused mode)."}]}],"caption":[{"type":"paragraph","inlineContent":[{"type":"text","text":"If any sensors are selected, we’ll enable the call to action."}]}],"type":"step","runtimePreview":null,"media":null},{"code":"03-recording-01-03.swift","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Programming a logging session is fast, but the MetaWear might not yet be connected. We’ll set a flag saying something’s happening."}]}],"caption":[],"type":"step","runtimePreview":null,"media":null},{"code":"03-recording-01-04.swift","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"The "},{"type":"codeVoice","code":".log"},{"type":"text","text":" and "},{"type":"codeVoice","code":".optionallyLog"},{"type":"text","text":" Combine operators in the SDK ask for an object conforming to "},{"type":"reference","isActive":true,"identifier":"doc:\/\/MetaWear\/documentation\/MetaWear\/MWLoggable"},{"type":"text","text":". Exact details are not important. It tells the SDK how to configure and obtain a sensor’s loggable signal, which varies by sensor model. What you do need to know is that code completion will find any options for you."}]}],"caption":[{"type":"paragraph","inlineContent":[{"type":"text","text":"For streaming, one-time reads, and one-time commands, there are also "},{"type":"reference","isActive":true,"identifier":"doc:\/\/MetaWear\/documentation\/MetaWear\/MWStreamable"},{"type":"text","text":", "},{"type":"reference","isActive":true,"identifier":"doc:\/\/MetaWear\/documentation\/MetaWear\/MWReadable"},{"type":"text","text":", and "},{"type":"reference","isActive":true,"identifier":"doc:\/\/MetaWear\/documentation\/MetaWear\/MWCommand"},{"type":"text","text":". Some sensors can only be streamed or logged by polling, hence "},{"type":"reference","isActive":true,"identifier":"doc:\/\/MetaWear\/documentation\/MetaWear\/MWPollable"},{"type":"text","text":". These are sorta-don’t-cares. Overloads on "},{"type":"codeVoice","code":"log"},{"type":"text","text":" and "},{"type":"codeVoice","code":"stream"},{"type":"text","text":" handle the details for you."}]}],"type":"step","runtimePreview":null,"media":null},{"code":"03-recording-01-05.swift","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"To organize calling a series of "},{"type":"codeVoice","code":".optionallyLog"},{"type":"text","text":" commands, "},{"type":"emphasis","inlineContent":[{"type":"text","text":"Streamy"}]},{"type":"text","text":" uses a configuration container based on the selected sensors."}]}],"caption":[{"type":"paragraph","inlineContent":[{"type":"text","text":"You can instantiate "},{"type":"codeVoice","code":"MWLoggable"},{"type":"text","text":" conforming types yourself, similar to SwiftUI styles. Our open source "},{"type":"emphasis","inlineContent":[{"type":"text","text":"MetaBase 5"}]},{"type":"text","text":" uses this strategy to merge an array of optional streaming publishers."}]}],"type":"step","runtimePreview":null,"media":null},{"code":"03-recording-01-06.swift","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Once the commands issue, "},{"type":"emphasis","inlineContent":[{"type":"text","text":"Streamy"}]},{"type":"text","text":" enables the download action."}]}],"caption":[],"type":"step","runtimePreview":null,"media":null}]},{"anchor":"Download-data","title":"Download data","contentSection":[{"kind":"contentAndMedia","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Collect logged data into exportable CSV files."}]}],"mediaPosition":"trailing","media":"bird-gray-yellow.png"}],"stepsSection":[{"code":"03-recording-02-01.swift","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"The SDK’s "},{"type":"codeVoice","code":".downloadLogs"},{"type":"text","text":" command asks for a "},{"type":"codeVoice","code":"Date"},{"type":"text","text":" when logging started. This aligns the timestamps of datapoints across groups of MetaWears, as each will start logging at different times due to Bluetooth delays."}]}],"caption":[{"type":"paragraph","inlineContent":[{"type":"text","text":"For demo purposes "},{"type":"emphasis","inlineContent":[{"type":"text","text":"Streamy"}]},{"type":"text","text":" just injects the current time. A real app should have cached a timestamp back when the log command succeeded."}]}],"type":"step","runtimePreview":null,"media":null},{"code":"03-recording-02-02.swift","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"The "},{"type":"codeVoice","code":"download"},{"type":"text","text":" operators will emit progress updates approximately every 4%. At 100%, the collected data arrives."}]}],"caption":[{"type":"paragraph","inlineContent":[{"type":"text","text":"This percentage is a rough estimate from counting flash storage pages. If the last page was only minimally filled with data, you’ll see progress leap to 100%."}]}],"type":"step","runtimePreview":null,"media":null},{"code":"","content":[{"type":"paragraph","inlineContent":[{"type":"emphasis","inlineContent":[{"type":"text","text":"Streamy"}]},{"type":"text","text":" passes the data component of the download tuple for CSV formatting."}]}],"caption":[],"type":"step","runtimePreview":null,"media":null},{"code":"03-recording-02-04.swift","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Translate the array of "},{"type":"reference","isActive":true,"identifier":"doc:\/\/MetaWear\/documentation\/MetaWear\/MWDataTable"},{"type":"text","text":" into CSV-formatted Data by calling "},{"type":"reference","isActive":true,"identifier":"doc:\/\/MetaWear\/documentation\/MetaWear\/MWDataTable\/makeCSV(delimiter:)"},{"type":"text","text":"."}]}],"caption":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Each table represents one sensor. Use "},{"type":"reference","isActive":true,"identifier":"doc:\/\/MetaWear\/documentation\/MetaWear\/MWDataTable\/source"},{"type":"text","text":" for its name. The time-related columns and decimal digits of the output are customizable. (When streaming data, the SDK returns timestamped "},{"type":"codeVoice","code":"SIMD<Float>"},{"type":"text","text":" and other native types.)"}]}],"type":"step","runtimePreview":null,"media":null},{"code":"03-recording-02-05.swift","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Export and archive these CSVs as needed."}]}],"caption":[{"type":"paragraph","inlineContent":[{"type":"emphasis","inlineContent":[{"type":"text","text":"Streamy"}]},{"type":"text","text":" writes these files to a temp folder. A "},{"type":"codeVoice","code":"FileWrapper"},{"type":"text","text":" for that folder is embedded in a "},{"type":"codeVoice","code":"FileDocument"},{"type":"text","text":" to align with a SwiftUI API. "},{"type":"emphasis","inlineContent":[{"type":"text","text":"MetaBase"}]},{"type":"text","text":" archives the files to CoreData and iCloud and exports them using AppKit and UIKit APIs."}]}],"type":"step","runtimePreview":null,"media":null}]}]},{"action":{"overridingTitleInlineContent":[{"type":"text","text":"Get started"}],"isActive":true,"type":"reference","identifier":"doc:\/\/MetaWear\/tutorials\/MetaWear\/Training-Activity-Classification","overridingTitle":"Get started"},"featuredEyebrow":"Tutorial","kind":"callToAction","title":"Training an Activity Classifier","abstract":[{"type":"text","text":"Let’s collect training data for CoreML to compute a model for classifying motion data."}]}],"references":{"03-recording-01-04.swift":{"syntax":"swift","content":["class NewSessionUseCase: ObservableObject {","","    @Published private(set) var sensors:  Set<MWNamedSignal> = []","    let sensorChoices:                    [MWNamedSignal] = [","        .acceleration, .gyroscope, .linearAcceleration, .quaternion","    ]","","    @Published private(set) var state:    UseCaseState    = .notReady","    ...","}","","extension NewSessionUseCase {","","    func didTapCTA() {","        guard sensors.hasElements, let metawear = metawear else { return }","        state = .workingIndefinite","","        actionSub = metawear","            .publishWhenConnected()","            .first()","            .optionallyLog(<some MWLoggable>)","        ...","","        metawear.connect()","    }","}"],"fileName":"NewSession.swift","identifier":"03-recording-01-04.swift","type":"file","fileType":"swift","highlights":[{"line":18},{"line":19},{"line":20},{"line":21},{"line":22}]},"03-recording-02-02.swift":{"syntax":"swift","content":["class DownloadUseCase: ObservableObject {","","    private(set) var startDate:         Date","    @Published private(set) var state:  UseCaseState      = .notReady","","    init(_ knownDevice: MWKnownDevice, startDate: Date) {","        self.startDate = startDate","        self.metawear = knownDevice.mw","        self.deviceName = knownDevice.meta.name","    }","}","","extension DownloadUseCase {","","    func onAppear() {","        guard state == .notReady, let metawear = metawear else { return }","        actionSub =  metawear","            .publishWhenConnected()","            .first()","            .downloadLogs(startDate: startDate)","            .handleEvents(receiveOutput: { [weak self] (_, percentComplete) in","                DispatchQueue.main.async { [weak self] in","                    self?.state = .workingProgress($0)","                }","            })","        ...","    }","}"],"fileName":"Download.swift","identifier":"03-recording-02-02.swift","type":"file","fileType":"swift","highlights":[{"line":21},{"line":22},{"line":23},{"line":24},{"line":25}]},"doc://MetaWear/documentation/MetaWear/MWStreamable":{"role":"symbol","title":"MWStreamable","fragments":[{"kind":"keyword","text":"protocol"},{"kind":"text","text":" "},{"kind":"identifier","text":"MWStreamable"}],"abstract":[{"type":"text","text":"Sensors that can stream data at about 100 to 120 Hz"},{"type":"text","text":" "},{"type":"text","text":"adhere to this protocol to configure, start, and stop a"},{"type":"text","text":" "},{"type":"text","text":"data signal."}],"identifier":"doc:\/\/MetaWear\/documentation\/MetaWear\/MWStreamable","kind":"symbol","type":"topic","navigatorTitle":[{"kind":"identifier","text":"MWStreamable"}],"url":"\/documentation\/metawear\/mwstreamable"},"doc://MetaWear/documentation/MetaWear/MWCommand":{"role":"symbol","title":"MWCommand","fragments":[{"kind":"keyword","text":"protocol"},{"kind":"text","text":" "},{"kind":"identifier","text":"MWCommand"}],"abstract":[{"type":"text","text":"Issues a command, such as recording a macro or resetting to factory defaults."}],"identifier":"doc:\/\/MetaWear\/documentation\/MetaWear\/MWCommand","kind":"symbol","type":"topic","navigatorTitle":[{"kind":"identifier","text":"MWCommand"}],"url":"\/documentation\/metawear\/mwcommand"},"doc://MetaWear/documentation/MetaWear/MWDataTable/source":{"role":"symbol","title":"source","fragments":[{"kind":"keyword","text":"let"},{"kind":"text","text":" "},{"kind":"identifier","text":"source"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"MWNamedSignal","preciseIdentifier":"s:8MetaWear13MWNamedSignalO"}],"abstract":[],"identifier":"doc:\/\/MetaWear\/documentation\/MetaWear\/MWDataTable\/source","kind":"symbol","type":"topic","url":"\/documentation\/metawear\/mwdatatable\/source"},"doc://MetaWear/tutorials/MetaWear/Connecting-to-MetaWears#Managing-known-devices":{"role":"pseudoSymbol","title":"Managing known devices","abstract":[{"type":"text","text":"Learn how "},{"type":"emphasis","inlineContent":[{"type":"text","text":"Streamy"}]},{"type":"text","text":" finds and manages both nearby and cloud-synced MetaWears."}],"identifier":"doc:\/\/MetaWear\/tutorials\/MetaWear\/Connecting-to-MetaWears#Managing-known-devices","kind":"section","type":"section","url":"\/tutorials\/metawear\/connecting-to-metawears#Managing-known-devices"},"03-recording-00-00.swift":{"syntax":"swift","content":["class NextStepsUseCase: ObservableObject {","","    @Published private(set) var cta:   UseCaseCTA       = .connect","    @Published private(set) var state: UseCaseState     = .ready","    let deviceName:                    String","","    private weak var metawear:         MetaWear?       = nil","    private var      getCTASub:        AnyCancellable? = nil","","    init(_ knownDevice: MWKnownDevice) {","        self.metawear = knownDevice.mw","        self.deviceName = knownDevice.meta.name","    }","}","","extension NextStepsUseCase {","","    func onAppear() {","        getCTAState()","    }","}","","private extension NextStepsUseCase {","","    func getCTAState() {","        getCTASub = metawear","            .publishWhenConnected()","            .first()","            .read(.logLength)","","        metawear.connect()","    }","}"],"fileName":"NextSteps.swift","identifier":"03-recording-00-00.swift","type":"file","fileType":"swift","highlights":[{"line":29}]},"03-recording-01-00.swift":{"syntax":"swift","content":["class NewSessionUseCase: ObservableObject {","","    let deviceName:                       String","    private weak var metawear:            MetaWear?       = nil","","    init(_ knownDevice: MWKnownDevice) {","        self.metawear = knownDevice.mw","        self.deviceName = knownDevice.meta.name","    }","}","","extension NewSessionUseCase {","","    ...","}"],"fileName":"NewSession.swift","identifier":"03-recording-01-00.swift","type":"file","fileType":"swift","highlights":[{"line":7},{"line":8}]},"03-recording-01-05.swift":{"syntax":"swift","content":["class NewSessionUseCase: ObservableObject {","","    @Published private(set) var sensors:  Set<MWNamedSignal> = []","    let sensorChoices:                    [MWNamedSignal] = [","        .acceleration, .gyroscope, .linearAcceleration, .quaternion","    ]","","    @Published private(set) var state:    UseCaseState    = .notReady","    ...","}","","extension NewSessionUseCase {","","    func didTapCTA() {","        guard sensors.hasElements, let metawear = metawear else { return }","        state = .workingIndefinite","        let configs = SensorConfigurations(selections: sensors)","        actionSub = metawear","            .publishWhenConnected()","            .first()","            .optionallyLog(<some MWLoggable>)","        ...","","        metawear.connect()","    }","}","","struct SensorConfigurations {","    var accelerometer: MWAccelerometer? = nil","    var gyroscope:     MWGyroscope?     = nil","    var linearAcc:     MWSensorFusion.LinearAcceleration? = nil","    var quaternion:    MWSensorFusion.Quaternion? = nil","","    init(selections: Set<MWNamedSignal>)  {","        if selections.contains(.linearAcceleration) {","            linearAcc  = .init(mode: .imuplus)","            return","        } else if selections.contains(.quaternion) {","            quaternion = .init(mode: .imuplus)","            return","        }","","        if selections.contains(.acceleration) {","            accelerometer = .init(rate: .hz100, gravity: .g16)","        }","        if selections.contains(.gyroscope) {","            gyroscope = .init(rate: .hz100, range: .dps2000)","        }","    }","}"],"fileName":"NewSession.swift","identifier":"03-recording-01-05.swift","type":"file","fileType":"swift","highlights":[{"line":17},{"line":27},{"line":28},{"line":29},{"line":30},{"line":31},{"line":32},{"line":33},{"line":34},{"line":35},{"line":36},{"line":37},{"line":38},{"line":39},{"line":40},{"line":41},{"line":42},{"line":43},{"line":44},{"line":45},{"line":46},{"line":47},{"line":48},{"line":49},{"line":50}]},"doc://MetaWear/tutorials/MetaWear/Discover-&-Connect":{"role":"article","title":"Discover & Connect","abstract":[],"identifier":"doc:\/\/MetaWear\/tutorials\/MetaWear\/Discover-&-Connect","kind":"article","type":"topic","url":"\/tutorials\/metawear\/discover-&-connect"},"streamyIcon.png":{"alt":"Streamy app icon","type":"image","identifier":"streamyIcon.png","variants":[{"url":"\/images\/streamyIcon@2x.png","traits":["2x","light"]}]},"doc://MetaWear/tutorials/MetaWear":{"role":"overview","title":"From Zero to Machine Learning","abstract":[{"type":"text","text":"Control MetaWear wearable sensors to classify movement. Let’s build "},{"type":"emphasis","inlineContent":[{"type":"text","text":"Streamy"}]},{"type":"text","text":", a barebones app using "},{"type":"codeVoice","code":"Swift"},{"type":"text","text":", "},{"type":"codeVoice","code":"Combine"},{"type":"text","text":", "},{"type":"codeVoice","code":"CoreML"},{"type":"text","text":", and "},{"type":"codeVoice","code":"SwiftUI"},{"type":"text","text":"."}],"identifier":"doc:\/\/MetaWear\/tutorials\/MetaWear","kind":"overview","type":"topic","url":"\/tutorials\/metawear"},"doc://MetaWear/tutorials/MetaWear/Adding-MetaWear-to-a-Project":{"role":"project","title":"Adding MetaWear to a Project","estimatedTime":"5min","abstract":[{"type":"text","text":"This tutorial examines the dependencies and permissions needed for the SDK."}],"identifier":"doc:\/\/MetaWear\/tutorials\/MetaWear\/Adding-MetaWear-to-a-Project","kind":"project","type":"topic","url":"\/tutorials\/metawear\/adding-metawear-to-a-project"},"doc://MetaWear/tutorials/MetaWear/Logging-Sensor-Data#Download-data":{"role":"pseudoSymbol","title":"Download data","abstract":[{"type":"text","text":"Configure an arbitrary number of sensors for logging, exporting time-synced data as CSVs in a folder."}],"identifier":"doc:\/\/MetaWear\/tutorials\/MetaWear\/Logging-Sensor-Data#Download-data","kind":"section","type":"section","url":"\/tutorials\/metawear\/logging-sensor-data#Download-data"},"doc://MetaWear/tutorials/MetaWear/Connecting-to-MetaWears#First-connection":{"role":"pseudoSymbol","title":"First connection","abstract":[{"type":"text","text":"Learn how "},{"type":"emphasis","inlineContent":[{"type":"text","text":"Streamy"}]},{"type":"text","text":" finds and manages both nearby and cloud-synced MetaWears."}],"identifier":"doc:\/\/MetaWear\/tutorials\/MetaWear\/Connecting-to-MetaWears#First-connection","kind":"section","type":"section","url":"\/tutorials\/metawear\/connecting-to-metawears#First-connection"},"doc://MetaWear/tutorials/MetaWear/Using-a-CoreML-Model":{"role":"project","title":"Using a CoreML Model","estimatedTime":"15min","abstract":[{"type":"text","text":"Forthcoming."}],"identifier":"doc:\/\/MetaWear\/tutorials\/MetaWear\/Using-a-CoreML-Model","kind":"project","type":"topic","url":"\/tutorials\/metawear\/using-a-coreml-model"},"doc://MetaWear/tutorials/MetaWear/Training-Activity-Classification#Collecting-Training-Data":{"role":"pseudoSymbol","title":"Collecting Training Data","abstract":[{"type":"text","text":"Let’s collect training data for CoreML to compute a model for classifying motion data."}],"identifier":"doc:\/\/MetaWear\/tutorials\/MetaWear\/Training-Activity-Classification#Collecting-Training-Data","kind":"section","type":"section","url":"\/tutorials\/metawear\/training-activity-classification#Collecting-Training-Data"},"doc://MetaWear/tutorials/MetaWear/Logging-Sensor-Data":{"role":"project","title":"Logging Sensor Data","estimatedTime":"15min","abstract":[{"type":"text","text":"Configure an arbitrary number of sensors for logging, exporting time-synced data as CSVs in a folder."}],"identifier":"doc:\/\/MetaWear\/tutorials\/MetaWear\/Logging-Sensor-Data","kind":"project","type":"topic","url":"\/tutorials\/metawear\/logging-sensor-data"},"03-recording-02-01.swift":{"syntax":"swift","content":["class DownloadUseCase: ObservableObject {","","    private(set) var startDate:         Date","    @Published private(set) var state:  UseCaseState      = .notReady","","    init(_ knownDevice: MWKnownDevice, startDate: Date) {","        self.startDate = startDate","        self.metawear = knownDevice.mw","        self.deviceName = knownDevice.meta.name","    }","}","","extension DownloadUseCase {","","    func onAppear() {","        guard state == .notReady, let metawear = metawear else { return }","        actionSub =  metawear","            .publishWhenConnected()","            .first()","            .downloadLogs(startDate: startDate)","        ...","    }","}"],"fileName":"Download.swift","identifier":"03-recording-02-01.swift","type":"file","fileType":"swift","highlights":[{"line":7},{"line":20}]},"doc://MetaWear/tutorials/MetaWear/Log-Sensor-Data":{"role":"article","title":"Log Sensor Data","abstract":[],"identifier":"doc:\/\/MetaWear\/tutorials\/MetaWear\/Log-Sensor-Data","kind":"article","type":"topic","url":"\/tutorials\/metawear\/log-sensor-data"},"03-recording-01-01.swift":{"syntax":"swift","content":["class NewSessionUseCase: ObservableObject {","","    @Published private(set) var sensors:  Set<MWNamedSignal> = []","    let sensorChoices:                    [MWNamedSignal] = [","        .acceleration, .gyroscope, .linearAcceleration, .quaternion","    ]","    ...","}","","extension NewSessionUseCase {","","    ...","}"],"fileName":"NewSession.swift","identifier":"03-recording-01-01.swift","type":"file","fileType":"swift","highlights":[{"line":3},{"line":4},{"line":5},{"line":6}]},"doc://MetaWear/tutorials/MetaWear/Adding-MetaWear-to-a-Project#Whats-Ahead":{"role":"pseudoSymbol","title":"What's Ahead","abstract":[{"type":"text","text":"This tutorial examines the dependencies and permissions needed for the SDK."}],"identifier":"doc:\/\/MetaWear\/tutorials\/MetaWear\/Adding-MetaWear-to-a-Project#Whats-Ahead","kind":"section","type":"section","url":"\/tutorials\/metawear\/adding-metawear-to-a-project#Whats-Ahead"},"doc://MetaWear/documentation/MetaWear/MWDataTable/makeCSV(delimiter:)":{"role":"symbol","title":"makeCSV(delimiter:)","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"makeCSV"},{"kind":"text","text":"("},{"kind":"externalParam","text":"delimiter"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"String","preciseIdentifier":"s:SS"},{"kind":"text","text":") -> "},{"kind":"typeIdentifier","text":"String","preciseIdentifier":"s:SS"}],"abstract":[{"type":"text","text":"Make a CSV with a labeled header row, optionally with other delimiters like a pipe |"}],"identifier":"doc:\/\/MetaWear\/documentation\/MetaWear\/MWDataTable\/makeCSV(delimiter:)","kind":"symbol","type":"topic","url":"\/documentation\/metawear\/mwdatatable\/makecsv(delimiter:)"},"03-recording-01-03.swift":{"syntax":"swift","content":["class NewSessionUseCase: ObservableObject {","","    @Published private(set) var sensors:  Set<MWNamedSignal> = []","    let sensorChoices:                    [MWNamedSignal] = [","        .acceleration, .gyroscope, .linearAcceleration, .quaternion","    ]","","    @Published private(set) var state:    UseCaseState    = .notReady","    ...","}","","extension NewSessionUseCase {","","    func didTapCTA() {","        guard sensors.hasElements, let metawear = metawear else { return }","        state = .workingIndefinite","","        actionSub = ...","","        metawear.connect()","    }","}"],"fileName":"NewSession.swift","identifier":"03-recording-01-03.swift","type":"file","fileType":"swift","highlights":[]},"Streamy.zip":{"checksum":"37d02e914436e3be7cad8b6278697ae323af5f0ce941dab5d9005a05c34e347fd37e54c1f12c401aba55671a33667f73311abcb237050010942dcc5cdd956a25","type":"download","identifier":"Streamy.zip","url":"\/downloads\/Streamy.zip"},"doc://MetaWear/documentation/MetaWear/MWNamedSignal":{"role":"symbol","title":"MWNamedSignal","fragments":[{"kind":"keyword","text":"enum"},{"kind":"text","text":" "},{"kind":"identifier","text":"MWNamedSignal"}],"abstract":[{"type":"text","text":"String key returned with a logger signal for a module by the C++ library."},{"type":"text","text":" "},{"type":"text","text":"Subscripts can indicate a particular aspect (e.g., which thermistor),"},{"type":"text","text":" "},{"type":"text","text":"a custom slice into a Cartesian float, or other more advanced operations."}],"identifier":"doc:\/\/MetaWear\/documentation\/MetaWear\/MWNamedSignal","kind":"symbol","type":"topic","navigatorTitle":[{"kind":"identifier","text":"MWNamedSignal"}],"url":"\/documentation\/metawear\/mwnamedsignal"},"doc://MetaWear/tutorials/MetaWear/Connecting-to-MetaWears":{"role":"project","title":"Connecting to MetaWears","estimatedTime":"15min","abstract":[{"type":"text","text":"Learn how "},{"type":"emphasis","inlineContent":[{"type":"text","text":"Streamy"}]},{"type":"text","text":" finds and manages both nearby and cloud-synced MetaWears."}],"identifier":"doc:\/\/MetaWear\/tutorials\/MetaWear\/Connecting-to-MetaWears","kind":"project","type":"topic","url":"\/tutorials\/metawear\/connecting-to-metawears"},"doc://MetaWear/tutorials/MetaWear/Logging-Sensor-Data#Configure-logging-commands":{"role":"pseudoSymbol","title":"Configure logging commands","abstract":[{"type":"text","text":"Configure an arbitrary number of sensors for logging, exporting time-synced data as CSVs in a folder."}],"identifier":"doc:\/\/MetaWear\/tutorials\/MetaWear\/Logging-Sensor-Data#Configure-logging-commands","kind":"section","type":"section","url":"\/tutorials\/metawear\/logging-sensor-data#Configure-logging-commands"},"doc://MetaWear/tutorials/MetaWear/Connecting-to-MetaWears#List-nearby-devices":{"role":"pseudoSymbol","title":"List nearby devices","abstract":[{"type":"text","text":"Learn how "},{"type":"emphasis","inlineContent":[{"type":"text","text":"Streamy"}]},{"type":"text","text":" finds and manages both nearby and cloud-synced MetaWears."}],"identifier":"doc:\/\/MetaWear\/tutorials\/MetaWear\/Connecting-to-MetaWears#List-nearby-devices","kind":"section","type":"section","url":"\/tutorials\/metawear\/connecting-to-metawears#List-nearby-devices"},"doc://MetaWear/tutorials/MetaWear/Using-a-CoreML-Model#Forthcoming":{"role":"pseudoSymbol","title":"Forthcoming","abstract":[{"type":"text","text":"Forthcoming."}],"identifier":"doc:\/\/MetaWear\/tutorials\/MetaWear\/Using-a-CoreML-Model#Forthcoming","kind":"section","type":"section","url":"\/tutorials\/metawear\/using-a-coreml-model#Forthcoming"},"03-recording-02-04.swift":{"syntax":"swift","content":["class DownloadUseCase: ObservableObject {","","    private(set) var startDate:         Date","    @Published private(set) var state:  UseCaseState      = .notReady","","    init(_ knownDevice: MWKnownDevice, startDate: Date) {","        self.startDate = startDate","        self.metawear = knownDevice.mw","        self.deviceName = knownDevice.meta.name","    }","}","","extension DownloadUseCase {","","    ...","}","","private extension DownloadUseCase {","","    func prepareForExport(dataTables: [MWDataTable]) {","        let prefix = startDate.formatted(date: .abbreviated, time: .shortened)","","        let csvs = dataTables.map { table -> (String, Data) in","            let filename = [table.source.name, prefix].joined(separator: \" \")","            let csv = table.makeCSV(delimiter: \",\").data(using: .utf8)!","            return (filename, csv)","        }","        ...","    }","}"],"fileName":"Download.swift","identifier":"03-recording-02-04.swift","type":"file","fileType":"swift","highlights":[{"line":18},{"line":19},{"line":20},{"line":21},{"line":22},{"line":23},{"line":24},{"line":25},{"line":26},{"line":27},{"line":28},{"line":29},{"line":30}]},"bird-rainbow.png":{"alt":"Bird art","type":"image","identifier":"bird-rainbow.png","variants":[{"url":"\/images\/bird-rainbow@1x.png","traits":["1x","light"]}]},"doc://MetaWear/documentation/MetaWear/MWLoggable":{"role":"symbol","title":"MWLoggable","fragments":[{"kind":"keyword","text":"protocol"},{"kind":"text","text":" "},{"kind":"identifier","text":"MWLoggable"}],"abstract":[{"type":"text","text":"Sensors that can log data to onboard storage adhere to this protocol"},{"type":"text","text":" "},{"type":"text","text":"to configure, start, stop, and download the logger."}],"identifier":"doc:\/\/MetaWear\/documentation\/MetaWear\/MWLoggable","kind":"symbol","type":"topic","navigatorTitle":[{"kind":"identifier","text":"MWLoggable"}],"url":"\/documentation\/metawear\/mwloggable"},"doc://MetaWear/tutorials/MetaWear/Adding-MetaWear-to-a-Project#The-Core-SDK-Classes":{"role":"pseudoSymbol","title":"The Core SDK Classes","abstract":[{"type":"text","text":"This tutorial examines the dependencies and permissions needed for the SDK."}],"identifier":"doc:\/\/MetaWear\/tutorials\/MetaWear\/Adding-MetaWear-to-a-Project#The-Core-SDK-Classes","kind":"section","type":"section","url":"\/tutorials\/metawear\/adding-metawear-to-a-project#The-Core-SDK-Classes"},"doc://MetaWear/tutorials/MetaWear/Logging-Sensor-Data#To-Log-or-Download?":{"role":"pseudoSymbol","title":"To Log or Download?","abstract":[{"type":"text","text":"Configure an arbitrary number of sensors for logging, exporting time-synced data as CSVs in a folder."}],"identifier":"doc:\/\/MetaWear\/tutorials\/MetaWear\/Logging-Sensor-Data#To-Log-or-Download?","kind":"section","type":"section","url":"\/tutorials\/metawear\/logging-sensor-data#To-Log-or-Download?"},"bird-gray-yellow.png":{"alt":"Bird art","type":"image","identifier":"bird-gray-yellow.png","variants":[{"url":"\/images\/bird-gray-yellow@1x.png","traits":["1x","light"]}]},"doc://MetaWear/tutorials/MetaWear/Train-a-CoreML-Model":{"role":"article","title":"Train a CoreML Model","abstract":[],"identifier":"doc:\/\/MetaWear\/tutorials\/MetaWear\/Train-a-CoreML-Model","kind":"article","type":"topic","url":"\/tutorials\/metawear\/train-a-coreml-model"},"03-recording-02-05.swift":{"syntax":"swift","content":["class DownloadUseCase: ObservableObject {","","    private(set) var startDate:         Date","    @Published private(set) var state:  UseCaseState      = .notReady","","    init(_ knownDevice: MWKnownDevice, startDate: Date) {","        self.startDate = startDate","        self.metawear = knownDevice.mw","        self.deviceName = knownDevice.meta.name","    }","}","","extension DownloadUseCase {","","    ...","}","","private extension DownloadUseCase {","","    func prepareForExport(dataTables: [MWDataTable]) {","        let prefix = startDate.formatted(date: .abbreviated, time: .shortened)","","        let csvs = dataTables.map { table -> (String, Data) in","            let filename = [table.source.name, prefix].joined(separator: \" \")","            let csv = table.makeCSV(delimiter: \",\").data(using: .utf8)!","            return (filename, csv)","        }","","        self?.export = ExportUseCase(...)","        ...","    }","}"],"fileName":"Download.swift","identifier":"03-recording-02-05.swift","type":"file","fileType":"swift","highlights":[{"line":28},{"line":29}]},"03-recording-01-06.swift":{"syntax":"swift","content":["class NewSessionUseCase: ObservableObject {","","    @Published private(set) var sensors:  Set<MWNamedSignal> = []","    let sensorChoices:                    [MWNamedSignal] = [","        .acceleration, .gyroscope, .linearAcceleration, .quaternion","    ]","","    @Published private(set) var state:    UseCaseState    = .notReady","    ...","}","","extension NewSessionUseCase {","","    func didTapCTA() {","        guard sensors.hasElements, let metawear = metawear else { return }","        state = .workingIndefinite","        let configs = SensorConfigurations(selections: sensors)","        actionSub = metawear","            .publishWhenConnected()","            .first()","            .optionallyLog(configs.accelerometer)","            .optionallyLog(configs.gyroscope)","            .optionallyLog(configs.linearAcc)","            .optionallyLog(configs.quaternion)","            .sink(receiveCompletion: { [weak self] in","                displayError(from: $0, on: self, \\.state)","            }, receiveValue: { [weak self] in","                self?.offerDownloadCallToAction()","            })","","        metawear.connect()","    }","}"],"fileName":"NewSession.swift","identifier":"03-recording-01-06.swift","type":"file","fileType":"swift","highlights":[{"line":21},{"line":22},{"line":23},{"line":24},{"line":25},{"line":26},{"line":27},{"line":28},{"line":29}]},"doc://MetaWear/tutorials/MetaWear/Adding-MetaWear-to-a-Project#Swift-Package-Manager-&-Permissions":{"role":"pseudoSymbol","title":"Swift Package Manager & Permissions","abstract":[{"type":"text","text":"This tutorial examines the dependencies and permissions needed for the SDK."}],"identifier":"doc:\/\/MetaWear\/tutorials\/MetaWear\/Adding-MetaWear-to-a-Project#Swift-Package-Manager-&-Permissions","kind":"section","type":"section","url":"\/tutorials\/metawear\/adding-metawear-to-a-project#Swift-Package-Manager-&-Permissions"},"doc://MetaWear/documentation/MetaWear/MWPollable":{"role":"symbol","title":"MWPollable","fragments":[{"kind":"keyword","text":"protocol"},{"kind":"text","text":" "},{"kind":"identifier","text":"MWPollable"}],"abstract":[{"type":"text","text":"Sensors natively incapable of continuous output, such as thermistors,"},{"type":"text","text":" "},{"type":"text","text":"can output “streamable” and loggable outputs with the help of"},{"type":"text","text":" "},{"type":"text","text":"onboard timers that fire at reasonable intervals. This protocol"},{"type":"text","text":" "},{"type":"text","text":"organizes the methods and properties for polling such sensors."}],"identifier":"doc:\/\/MetaWear\/documentation\/MetaWear\/MWPollable","kind":"symbol","type":"topic","navigatorTitle":[{"kind":"identifier","text":"MWPollable"}],"url":"\/documentation\/metawear\/mwpollable"},"doc://MetaWear/documentation/MetaWear/MWReadable":{"role":"symbol","title":"MWReadable","fragments":[{"kind":"keyword","text":"protocol"},{"kind":"text","text":" "},{"kind":"identifier","text":"MWReadable"}],"abstract":[{"type":"text","text":"For signals that can only be read once"},{"type":"text","text":" "},{"type":"text","text":"Sensors natively incapable of continuous output, such as thermistors,"},{"type":"text","text":" "},{"type":"text","text":"adopt this protocol to organize configuring, reading, and closing a"},{"type":"text","text":" "},{"type":"text","text":"sensor’s data signal."}],"identifier":"doc:\/\/MetaWear\/documentation\/MetaWear\/MWReadable","kind":"symbol","type":"topic","navigatorTitle":[{"kind":"identifier","text":"MWReadable"}],"url":"\/documentation\/metawear\/mwreadable"},"doc://MetaWear/tutorials/MetaWear/Training-Activity-Classification":{"role":"project","title":"Training an Activity Classifier","estimatedTime":"15min","abstract":[{"type":"text","text":"Let’s collect training data for CoreML to compute a model for classifying motion data."}],"identifier":"doc:\/\/MetaWear\/tutorials\/MetaWear\/Training-Activity-Classification","kind":"project","type":"topic","url":"\/tutorials\/metawear\/training-activity-classification"},"doc://MetaWear/documentation/MetaWear/MWDataTable":{"role":"symbol","title":"MWDataTable","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"MWDataTable"}],"abstract":[{"type":"text","text":"Stringly-expressed data from any sensor, ready to export in CSV format."}],"identifier":"doc:\/\/MetaWear\/documentation\/MetaWear\/MWDataTable","kind":"symbol","type":"topic","navigatorTitle":[{"kind":"identifier","text":"MWDataTable"}],"url":"\/documentation\/metawear\/mwdatatable"}}}