{"primaryContentSections":[{"kind":"content","content":[{"anchor":"Overview","level":2,"type":"heading","text":"Overview"},{"type":"paragraph","inlineContent":[{"type":"text","text":"While the C\/C++ library remains exposed as before, most Swift APIs have streamlined, but familiar namespacing. All asynchronous interactions and value streams use Apple’s Combine framework (which reads similar to React). If new to Combine, check out "},{"type":"reference","isActive":true,"identifier":"https:\/\/heckj.github.io\/swiftui-notes\/"},{"type":"text","text":"."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Most activities kick off with a publisher, such as "},{"type":"reference","isActive":true,"identifier":"doc:\/\/MetaWear\/documentation\/MetaWear\/MetaWear\/publishWhenConnected()"},{"type":"text","text":" or "},{"type":"reference","isActive":true,"identifier":"doc:\/\/MetaWear\/documentation\/MetaWear\/MetaWear\/publishIfConnected()"},{"type":"text","text":". Next, an operator like "},{"type":"codeVoice","code":".stream"},{"type":"text","text":", "},{"type":"codeVoice","code":".log"},{"type":"text","text":", "},{"type":"codeVoice","code":".command"},{"type":"text","text":", "},{"type":"codeVoice","code":".read"},{"type":"text","text":", or "},{"type":"codeVoice","code":".optionallyLog"},{"type":"text","text":" will consume a sensor configuration struct or code-completing preset."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"A new iCloud metadata sync utility, "},{"type":"codeVoice","code":"MetaWearSyncStore"},{"type":"text","text":", and drag-and-drop conveniences are in the "},{"type":"codeVoice","code":"MetaWearSync"},{"type":"text","text":" product."}]},{"anchor":"Sample-Changes","level":2,"type":"heading","text":"Sample Changes"},{"type":"paragraph","inlineContent":[{"type":"text","text":"State changes are observed not through delegates, but publishers on the objects themselves. Gone are "},{"type":"codeVoice","code":"ScannerModel"},{"type":"text","text":" and "},{"type":"codeVoice","code":"ScannerModelItems"},{"type":"text","text":". Now the "},{"type":"reference","isActive":true,"identifier":"doc:\/\/MetaWear\/documentation\/MetaWear\/MetaWearScanner"},{"type":"text","text":" publishes diffs of its own device map or individual discoveries. The "},{"type":"codeVoice","code":"connect()"},{"type":"text","text":" command is relocated to the "},{"type":"reference","isActive":true,"identifier":"doc:\/\/MetaWear\/documentation\/MetaWear\/MetaWear"},{"type":"text","text":" itself."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"The scanner no longer mandates LED flashes upon connection. If you liked this, just use:"}]},{"type":"codeListing","syntax":null,"code":["let pattern: MWLED.FlashPattern = ...","metawear","   .whenConnected()","   .command(.ledFlash(pattern))","   .sink { _ in }","   .store(in: &subs)"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"You can also use the new "},{"type":"reference","isActive":true,"identifier":"doc:\/\/MetaWear\/documentation\/MetaWear\/MWLED\/Flash\/Pattern\/Emulator"},{"type":"text","text":" to depict the same event in your UI."}]},{"anchor":"Other-namespacing-changes","level":4,"type":"heading","text":"Other namespacing changes"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Most properties remain similar. Minor objects have been shortened with MW prefixes or placed one level deeper in a hierarchy. Some examples are:"}]},{"type":"unorderedList","items":[{"content":[{"type":"paragraph","inlineContent":[{"type":"reference","isActive":true,"identifier":"doc:\/\/MetaWear\/documentation\/MetaWear\/MetaWear\/DeviceInformation"},{"type":"text","text":" includes "},{"type":"reference","isActive":true,"identifier":"doc:\/\/MetaWear\/documentation\/MetaWear\/MACAddress"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"MWFirmwareServer"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"metaWear."},{"type":"text","text":" "},{"type":"reference","isActive":true,"identifier":"doc:\/\/MetaWear\/documentation\/MetaWear\/MetaWear\/publish()"},{"type":"text","text":" "},{"type":"codeVoice","code":".command(.resetFactoryDefaults)"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"reference","isActive":true,"identifier":"doc:\/\/MetaWear\/documentation\/MetaWear\/MetaWearScanner\/discoveredDevices"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"reference","isActive":true,"identifier":"doc:\/\/MetaWear\/documentation\/MetaWear\/MWData"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"reference","isActive":true,"identifier":"doc:\/\/MetaWear\/documentation\/MetaWear\/MWError"}]}]}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"An edge case difference: this SDK has a public "},{"type":"reference","isActive":true,"identifier":"doc:\/\/MetaWear\/documentation\/MetaWear\/MetaWear\/init(peripheral:scanner:mac:)"},{"type":"text","text":" for MetaWears so that you may roll your own "},{"type":"reference","isActive":true,"identifier":"doc:\/\/MetaWear\/documentation\/MetaWear\/MetaWearScanner"},{"type":"text","text":"."}]},{"anchor":"Comparing-Async-Frameworks","level":2,"type":"heading","text":"Comparing Async Frameworks"},{"type":"table","rows":[[[{"type":"paragraph","inlineContent":[{"type":"text","text":"Aspect"}]}],[{"type":"paragraph","inlineContent":[{"type":"text","text":"Bolts"}]}],[{"type":"paragraph","inlineContent":[{"type":"text","text":"Combine"}]}]],[[{"type":"paragraph","inlineContent":[{"type":"text","text":"Objects"}]}],[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"Task"}]}],[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"Publisher<Output, Failure>"},{"type":"text","text":" pipelines, retained by an "},{"type":"codeVoice","code":"AnyCancellable"},{"type":"text","text":" token"}]}]],[[{"type":"paragraph","inlineContent":[{"type":"text","text":"Semantics"}]}],[{"type":"paragraph","inlineContent":[{"type":"text","text":"Reference"}]}],[{"type":"paragraph","inlineContent":[{"type":"text","text":"Reference + value"}]}]],[[{"type":"paragraph","inlineContent":[{"type":"text","text":"Requirement"}]}],[{"type":"paragraph","inlineContent":[{"type":"text","text":"iOS 10"}]}],[{"type":"paragraph","inlineContent":[{"type":"text","text":"iOS 13"}]}]],[[{"type":"paragraph","inlineContent":[{"type":"text","text":"Distribution"}]}],[{"type":"paragraph","inlineContent":[{"type":"text","text":"Cocoapods"}]}],[{"type":"paragraph","inlineContent":[{"type":"text","text":"Enables Swift Package Manager"}]}]]],"header":"row"},{"anchor":"Quick-tips","level":4,"type":"heading","text":"Quick tips"},{"type":"unorderedList","items":[{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Most publishers are value types, but "},{"type":"codeVoice","code":"CurrentValueSubject"},{"type":"text","text":" and "},{"type":"codeVoice","code":"PassthroughSubject"},{"type":"text","text":" are reference types. You can progressively build and pass around “unconnected” publisher pipelines. Execution starts upon subscription, which often is when you create and store an "},{"type":"codeVoice","code":"AnyCancellable"},{"type":"text","text":" token."}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"To consume one type and output another asynchronously, use "},{"type":"codeVoice","code":"flatMap"},{"type":"text","text":"."}]}]}]},{"type":"codeListing","syntax":"swift","code":[".flatMap { [weak self] output -> AnyPublisher<Output,Failure> in ","    return <new publisher>.eraseToAnyPublisher()","}"]},{"type":"unorderedList","items":[{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"To perform side effects, use "},{"type":"codeVoice","code":".handleEvents()"},{"type":"text","text":"."}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"To cancel one or more pipelines, call "},{"type":"codeVoice","code":".cancel()"},{"type":"text","text":" on a stored "},{"type":"codeVoice","code":"AnyCancellable"},{"type":"text","text":" token or use the "},{"type":"codeVoice","code":"prefix(untilOutputFrom:)"},{"type":"text","text":" operator."}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"If the compiler says "},{"type":"codeVoice","code":".flatMap()"},{"type":"text","text":" is unavailable or is inexplicably upset, the culprit may be discrepant "},{"type":"codeVoice","code":"Failure"},{"type":"text","text":" types. For example, "},{"type":"codeVoice","code":".tryMap()"},{"type":"text","text":" erases custom error types. You can use "},{"type":"codeVoice","code":".mapToMWError()"},{"type":"text","text":" or your own "},{"type":"codeVoice","code":".mapError()"},{"type":"text","text":" operator to keep the party going."}]}]}]},{"anchor":"Philosophies","level":2,"type":"heading","text":"Philosophies"},{"type":"table","rows":[[[{"type":"paragraph","inlineContent":[{"type":"text","text":"Philosophy"}]}],[{"type":"paragraph","inlineContent":[{"type":"text","text":"Prior SDK"}]}],[{"type":"paragraph","inlineContent":[{"type":"text","text":"Combine SDK"}]}]],[[{"type":"paragraph","inlineContent":[{"type":"text","text":"Purpose"}]}],[{"type":"paragraph","inlineContent":[{"type":"text","text":"Thin C wrapper"}]}],[{"type":"paragraph","inlineContent":[{"type":"text","text":"Beginner-friendly, extendable"}]}]],[[{"type":"paragraph","inlineContent":[{"type":"text","text":"Outputs"}]}],[{"type":"paragraph","inlineContent":[{"type":"text","text":"Some C structs"}]}],[{"type":"paragraph","inlineContent":[{"type":"text","text":"Only SIMD or other native types"}]}]],[[{"type":"paragraph","inlineContent":[{"type":"text","text":"Communication"}]}],[{"type":"paragraph","inlineContent":[{"type":"text","text":"Delegate-observer"}]}],[{"type":"paragraph","inlineContent":[{"type":"text","text":"Unlimited state subscriptions"}]}]],[[{"type":"paragraph","inlineContent":[{"type":"text","text":"Namespacing"}]}],[{"type":"paragraph","inlineContent":[{"type":"text","text":"Wider"}]}],[{"type":"paragraph","inlineContent":[{"type":"text","text":"More hierarchical (not quite 1:1)"}]}]],[[{"type":"paragraph","inlineContent":[{"type":"text","text":"Persistence"}]}],[{"type":"paragraph","inlineContent":[{"type":"text","text":"Many keys, fixed UserDefaults suite"}]}],[{"type":"paragraph","inlineContent":[{"type":"text","text":"One or two keys, customizable suite, migration"}]}]]],"header":"row"},{"anchor":"Resources","level":2,"type":"heading","text":"Resources"},{"type":"table","rows":[[[{"type":"paragraph","inlineContent":[{"type":"text","text":"Aspect"}]}],[{"type":"paragraph","inlineContent":[{"type":"text","text":"Prior SDK"}]}],[{"type":"paragraph","inlineContent":[{"type":"text","text":"Combine SDK"}]}]],[[{"type":"paragraph","inlineContent":[{"type":"text","text":"UI Assist"}]}],[{"type":"paragraph","inlineContent":[{"type":"text","text":"Imperative ScannerModel\/Item"}]}],[{"type":"paragraph","inlineContent":[{"type":"text","text":"Publishers or cloud-synced metadata store "},{"type":"codeVoice","code":"MetaWearSyncStore"},{"type":"text","text":" and "},{"type":"reference","isActive":true,"identifier":"doc:\/\/MetaWear\/documentation\/MetaWear\/MWLED\/Flash\/Pattern\/Emulator"}]}]],[[{"type":"paragraph","inlineContent":[{"type":"text","text":"Demo Apps"}]}],[{"type":"paragraph","inlineContent":[{"type":"text","text":"UIKit + SwiftUI"}]}],[{"type":"paragraph","inlineContent":[{"type":"text","text":"Bare test host, basic tutorial, MetaBase (all SwiftUI)"}]}]],[[{"type":"paragraph","inlineContent":[{"type":"text","text":"Install Base"}]}],[{"type":"paragraph","inlineContent":[{"type":"text","text":"Wider"}]}],[{"type":"paragraph","inlineContent":[{"type":"text","text":"New, but same "},{"type":"reference","isActive":true,"identifier":"https:\/\/mbientlab.com\/community\/"}]}]]],"header":"row"}]}],"schemaVersion":{"major":0,"minor":2,"patch":0},"sections":[],"variants":[{"paths":["\/documentation\/metawear\/migrating-from-bolts"],"traits":[{"interfaceLanguage":"swift"}]}],"identifier":{"url":"doc:\/\/MetaWear\/documentation\/MetaWear\/Migrating-From-Bolts","interfaceLanguage":"swift"},"abstract":[{"type":"text","text":"Overview of changes"}],"kind":"article","metadata":{"roleHeading":"Article","title":"Migrating from the Bolts SDK","role":"article","modules":[{"name":"MetaWear"}]},"hierarchy":{"paths":[["doc:\/\/MetaWear\/documentation\/MetaWear"]]},"seeAlsoSections":[{"title":"Getting Started","identifiers":["doc:\/\/MetaWear\/tutorials\/MetaWear"],"generated":true}],"references":{"doc://MetaWear/documentation/MetaWear/MWData":{"role":"symbol","title":"MWData","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"MWData"}],"abstract":[{"type":"text","text":"Useful when interacting with the C++ library."}],"identifier":"doc:\/\/MetaWear\/documentation\/MetaWear\/MWData","kind":"symbol","type":"topic","navigatorTitle":[{"kind":"identifier","text":"MWData"}],"url":"\/documentation\/metawear\/mwdata"},"doc://MetaWear/documentation/MetaWear/MWLED/Flash/Pattern/Emulator":{"role":"symbol","title":"MWLED.Flash.Pattern.Emulator","fragments":[{"kind":"keyword","text":"class"},{"kind":"text","text":" "},{"kind":"identifier","text":"Emulator"}],"abstract":[{"type":"text","text":"Load your own pattern and call "},{"type":"codeVoice","code":"emulate"},{"type":"text","text":" to recreate the MetaWear’s LED behavior"},{"type":"text","text":" "},{"type":"text","text":"in a SwiftUI view or by subscribing to the "},{"type":"codeVoice","code":"ledIsOnPublisher"},{"type":"text","text":"."}],"identifier":"doc:\/\/MetaWear\/documentation\/MetaWear\/MWLED\/Flash\/Pattern\/Emulator","kind":"symbol","type":"topic","navigatorTitle":[{"kind":"identifier","text":"Emulator"}],"url":"\/documentation\/metawear\/mwled\/flash\/pattern\/emulator"},"doc://MetaWear/documentation/MetaWear/MACAddress":{"role":"symbol","title":"MACAddress","fragments":[{"kind":"keyword","text":"typealias"},{"kind":"text","text":" "},{"kind":"identifier","text":"MACAddress"}],"abstract":[{"type":"text","text":"A 6-byte unique identifier for a MetaWear and any Bluetooth device (e.g., F1:4A:45:90:AC:9D)"}],"identifier":"doc:\/\/MetaWear\/documentation\/MetaWear\/MACAddress","kind":"symbol","type":"topic","navigatorTitle":[{"kind":"identifier","text":"MACAddress"}],"url":"\/documentation\/metawear\/macaddress"},"doc://MetaWear/documentation/MetaWear/MetaWear/init(peripheral:scanner:mac:)":{"role":"symbol","title":"init(peripheral:scanner:mac:)","fragments":[{"kind":"identifier","text":"init"},{"kind":"text","text":"("},{"kind":"externalParam","text":"peripheral"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"CBPeripheral","preciseIdentifier":"c:objc(cs)CBPeripheral"},{"kind":"text","text":", "},{"kind":"externalParam","text":"scanner"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"MetaWearScanner","preciseIdentifier":"c:@M@MetaWear@objc(cs)MetaWearScanner"},{"kind":"text","text":", "},{"kind":"externalParam","text":"mac"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"MACAddress","preciseIdentifier":"s:8MetaWear10MACAddressa"},{"kind":"text","text":"?)"}],"abstract":[{"type":"text","text":"Please use "},{"type":"reference","isActive":true,"identifier":"doc:\/\/MetaWear\/documentation\/MetaWear\/MetaWearScanner"},{"type":"text","text":" to initialize MetaWears properly."},{"type":"text","text":" "},{"type":"text","text":"To subclass the scanner, you may need to use this initializer."}],"identifier":"doc:\/\/MetaWear\/documentation\/MetaWear\/MetaWear\/init(peripheral:scanner:mac:)","kind":"symbol","type":"topic","url":"\/documentation\/metawear\/metawear\/init(peripheral:scanner:mac:)"},"https://heckj.github.io/swiftui-notes/":{"title":"Joseph Heck’s guide","titleInlineContent":[{"type":"text","text":"Joseph Heck’s guide"}],"type":"link","identifier":"https:\/\/heckj.github.io\/swiftui-notes\/","url":"https:\/\/heckj.github.io\/swiftui-notes\/"},"doc://MetaWear/documentation/MetaWear/MetaWear/publishWhenConnected()":{"role":"symbol","title":"publishWhenConnected()","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"publishWhenConnected"},{"kind":"text","text":"() -> "},{"kind":"typeIdentifier","text":"AnyPublisher","preciseIdentifier":"s:7Combine12AnyPublisherV"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"MetaWear","preciseIdentifier":"c:@M@MetaWear@objc(cs)MetaWear"},{"kind":"text","text":", "},{"kind":"typeIdentifier","text":"Never","preciseIdentifier":"s:s5NeverO"},{"kind":"text","text":">"}],"abstract":[{"type":"text","text":"Publishes after connection and setup."}],"identifier":"doc:\/\/MetaWear\/documentation\/MetaWear\/MetaWear\/publishWhenConnected()","kind":"symbol","type":"topic","url":"\/documentation\/metawear\/metawear\/publishwhenconnected()"},"doc://MetaWear/documentation/MetaWear/MetaWearScanner/discoveredDevices":{"role":"symbol","title":"discoveredDevices","fragments":[{"kind":"keyword","text":"var"},{"kind":"text","text":" "},{"kind":"identifier","text":"discoveredDevices"},{"kind":"text","text":": ["},{"kind":"typeIdentifier","text":"CBPeripheralIdentifier","preciseIdentifier":"s:8MetaWear22CBPeripheralIdentifiera"},{"kind":"text","text":" : "},{"kind":"typeIdentifier","text":"MetaWear","preciseIdentifier":"c:@M@MetaWear@objc(cs)MetaWear"},{"kind":"text","text":"]"}],"abstract":[{"type":"text","text":"All MetaWears discovered by the "},{"type":"codeVoice","code":"CBCentralManager"},{"type":"text","text":","},{"type":"text","text":" "},{"type":"text","text":"including those nearby but never connected to or those"},{"type":"text","text":" "},{"type":"text","text":"not nearby but remembered by CoreBluetooth from a prior"},{"type":"text","text":" "},{"type":"text","text":"session. Read only on the "},{"type":"reference","isActive":true,"identifier":"doc:\/\/MetaWear\/documentation\/MetaWear\/MetaWearScanner\/bleQueue"},{"type":"text","text":"."}],"identifier":"doc:\/\/MetaWear\/documentation\/MetaWear\/MetaWearScanner\/discoveredDevices","kind":"symbol","type":"topic","url":"\/documentation\/metawear\/metawearscanner\/discovereddevices"},"doc://MetaWear/documentation/MetaWear/MetaWear/publish()":{"role":"symbol","title":"publish()","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"publish"},{"kind":"text","text":"() -> "},{"kind":"typeIdentifier","text":"MWPublisher","preciseIdentifier":"s:8MetaWear11MWPublishera"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"MetaWear","preciseIdentifier":"c:@M@MetaWear@objc(cs)MetaWear"},{"kind":"text","text":">"}],"abstract":[{"type":"text","text":"Publishes this MetaWear once, regardless of connection state."}],"identifier":"doc:\/\/MetaWear\/documentation\/MetaWear\/MetaWear\/publish()","kind":"symbol","type":"topic","url":"\/documentation\/metawear\/metawear\/publish()"},"https://mbientlab.com/community/":{"title":"community forum","titleInlineContent":[{"type":"text","text":"community forum"}],"type":"link","identifier":"https:\/\/mbientlab.com\/community\/","url":"https:\/\/mbientlab.com\/community\/"},"doc://MetaWear/documentation/MetaWear":{"role":"collection","title":"MetaWear","abstract":[{"type":"text","text":"Develop Bluetooth Low Energy apps using our sensors and "},{"type":"codeVoice","code":"Combine"}],"identifier":"doc:\/\/MetaWear\/documentation\/MetaWear","kind":"symbol","type":"topic","url":"\/documentation\/metawear"},"doc://MetaWear/documentation/MetaWear/MetaWear":{"role":"symbol","title":"MetaWear","fragments":[{"kind":"keyword","text":"class"},{"kind":"text","text":" "},{"kind":"identifier","text":"MetaWear"}],"abstract":[{"type":"text","text":"Each MetaWear object corresponds a physical MetaWear board. This SDK"},{"type":"text","text":" "},{"type":"text","text":"wraps type-safe Swift methods and Combine publishers around C\/C++ functions"},{"type":"text","text":" "},{"type":"text","text":"and CoreBluetooth APIs so you can get started quickly."}],"identifier":"doc:\/\/MetaWear\/documentation\/MetaWear\/MetaWear","kind":"symbol","type":"topic","navigatorTitle":[{"kind":"identifier","text":"MetaWear"}],"url":"\/documentation\/metawear\/metawear"},"doc://MetaWear/documentation/MetaWear/MetaWear/DeviceInformation":{"role":"symbol","title":"MetaWear.DeviceInformation","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"DeviceInformation"}],"abstract":[{"type":"text","text":"Details about a MetaWear’s hardware and firmware."}],"identifier":"doc:\/\/MetaWear\/documentation\/MetaWear\/MetaWear\/DeviceInformation","kind":"symbol","type":"topic","navigatorTitle":[{"kind":"identifier","text":"DeviceInformation"}],"url":"\/documentation\/metawear\/metawear\/deviceinformation"},"doc://MetaWear/documentation/MetaWear/MetaWearScanner":{"role":"symbol","title":"MetaWearScanner","fragments":[{"kind":"keyword","text":"class"},{"kind":"text","text":" "},{"kind":"identifier","text":"MetaWearScanner"}],"abstract":[{"type":"text","text":"Start scanning for MetaWear devices without having to understand all of CoreBluetooth. Pipelines return on the scanner’s unique "},{"type":"codeVoice","code":"bleQueue"},{"type":"text","text":"."}],"identifier":"doc:\/\/MetaWear\/documentation\/MetaWear\/MetaWearScanner","kind":"symbol","type":"topic","navigatorTitle":[{"kind":"identifier","text":"MetaWearScanner"}],"url":"\/documentation\/metawear\/metawearscanner"},"doc://MetaWear/documentation/MetaWear/MWError":{"role":"symbol","title":"MWError","fragments":[{"kind":"keyword","text":"enum"},{"kind":"text","text":" "},{"kind":"identifier","text":"MWError"}],"abstract":[{"type":"text","text":"MetaWear Error"}],"identifier":"doc:\/\/MetaWear\/documentation\/MetaWear\/MWError","kind":"symbol","type":"topic","navigatorTitle":[{"kind":"identifier","text":"MWError"}],"url":"\/documentation\/metawear\/mwerror"},"doc://MetaWear/documentation/MetaWear/MetaWear/publishIfConnected()":{"role":"symbol","title":"publishIfConnected()","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"publishIfConnected"},{"kind":"text","text":"() -> "},{"kind":"typeIdentifier","text":"MWPublisher","preciseIdentifier":"s:8MetaWear11MWPublishera"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"MetaWear","preciseIdentifier":"c:@M@MetaWear@objc(cs)MetaWear"},{"kind":"text","text":">"}],"abstract":[{"type":"text","text":"Publishes if connected and setup at start, failing if not."}],"identifier":"doc:\/\/MetaWear\/documentation\/MetaWear\/MetaWear\/publishIfConnected()","kind":"symbol","type":"topic","url":"\/documentation\/metawear\/metawear\/publishifconnected()"},"doc://MetaWear/documentation/MetaWear/MetaWearScanner/bleQueue":{"role":"symbol","title":"bleQueue","fragments":[{"kind":"keyword","text":"let"},{"kind":"text","text":" "},{"kind":"identifier","text":"bleQueue"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"DispatchQueue","preciseIdentifier":"c:objc(cs)OS_dispatch_queue"}],"abstract":[{"type":"text","text":"Queue used by the "},{"type":"reference","isActive":true,"identifier":"doc:\/\/MetaWear\/documentation\/MetaWear\/MetaWearScanner\/central"},{"type":"text","text":" for all"},{"type":"text","text":" "},{"type":"text","text":"BLE operations and reads. All pipelines return"},{"type":"text","text":" "},{"type":"text","text":"on this queue."}],"identifier":"doc:\/\/MetaWear\/documentation\/MetaWear\/MetaWearScanner\/bleQueue","kind":"symbol","type":"topic","url":"\/documentation\/metawear\/metawearscanner\/blequeue"},"doc://MetaWear/tutorials/MetaWear":{"role":"overview","title":"From Zero to Machine Learning","abstract":[{"type":"text","text":"Control MetaWear wearable sensors to classify movement. Let’s build "},{"type":"emphasis","inlineContent":[{"type":"text","text":"Streamy"}]},{"type":"text","text":", a barebones app using "},{"type":"codeVoice","code":"Swift"},{"type":"text","text":", "},{"type":"codeVoice","code":"Combine"},{"type":"text","text":", "},{"type":"codeVoice","code":"CoreML"},{"type":"text","text":", and "},{"type":"codeVoice","code":"SwiftUI"},{"type":"text","text":"."}],"identifier":"doc:\/\/MetaWear\/tutorials\/MetaWear","kind":"overview","type":"topic","url":"\/tutorials\/metawear"}}}