@Tutorial(time: 5, projectFiles: "Streamy.zip") {
    @Intro(title: "Adding MetaWear to your Project") {
        Learn how to add the required SDK dependencies and permissions to your App.
        @Image(source: streamyIcon.png, alt: "Streamy app icon")
    }
    
    @Section(title: "What's Ahead") {
        @ContentAndMedia {
            In this tutorial series, you will sample the SDK by writing small logic layer "use case" components for an app that collects sensor data.
            
            Next, we'll train and implement a CoreML activity classifier for writing letters in the air. (Yes, at some point we will YMCA.)
            
            First, an introduction.
            @Image(source: bird-streamy.png, alt: "Bird art")
        }
        @Steps {

            @Step {
                This tutorial includes a companion app called Streamy that implements the components we build in this series. You should clone [Streamy](https://github.com/mbientlab/Streamy) before getting started.
                @Image(source: tut-streamy-mac-ios.png, alt: "Screenshot of Streamy on macOS and iOS")
            }

            @Step { 
                This tutorial will not cover UI or every line of the Streamy app. We will focus on the ins and outs of this SDK.
                
                _Streamy_ uses SwiftUI but this tutorial series is UI framework agnostic.
                @Code(name: "StreamyApp.swift", file: 00-root-01-01.swift) {
                    @Image(source: tut-streamy-mac-ios.png, alt: "Screenshot of Streamy on macOS and iOS")
                }
            }
            
            @Step {
                A secondary resource is the [Metabase](https://github.com/mbientlab/MetaWear-MetaBase-iOS-macOS-App) source code, our simple app for collecting MetaWear sensor data.
                @Image(source: tut-metabase-mac-ios.png, alt: "Screenshot of MetaBase on macOS and iOS")
            }
            
            @Step {
                A final resource for understanding the SDK is the [integration test host](https://github.com/mbientlab/MetaWear-Swift-Combine-SDK/tree/main/Tests/IntegrationTests) to write one-off tests.
                @Code(name: "ExampleTests.swift", file: 00-root-01-02.swift) { }
            }
        }
    }
    
    @Section(title: "Swift Package Manager & Permissions") {
        @ContentAndMedia {
            You can add the Swift Combine SDK to your project using Xcode's native package dependency manager.
            @Image(source: bird-red.png, alt: "Bird art")
        }
        @Steps {
            @Step { 
                In the File menu, choose Add Package and enter the URL: `https://github.com/mbientlab/MetaWear-Swift-Combine-SDK`.
                
                By default, Xcode will update the MetaWear package when minor versions are released, but not for a major release. You can also depend on a branch head or a commit. 
                @Image(source: tut-AddPackage.png, alt: "Xcode screenshot while adding a package")
            }
            @Step { 
                In this tutorial, we'll use all frameworks except the one to update device Firmware. You can de-select `MetaWearFirmware`.
                @Image(source: tut-AddPackageProducts.png, alt: "Xcode screenshot while selecting frameworks")
            }
            @Step { 
                Xcode will likely only add these frameworks to one of your targets. Remedy this by tapping the `+` icon inside the `Frameworks, Libraries and Embedded Content` section to add the same frameworks as above. 
                @Image(source: tut-ManuallyAddProducts.png, alt: ".")
            }
            @Step { 
                Don't forget to set the two `Info.plist` Bluetooth privacy usage descriptions. This adds Bluetooth capability to your App. Your app will not function otherwise.
                @Image(source: tut-Plist.png, alt: "Xcode screenshot of an Info.plist with two Privacy - Bluetooth keys")
            }
            @Step { 
                For macOS, match permissions to this screenshot. In the `Signing & Capabilities` section, under `App Sandbox` select `Bluetooth` and under `iCloud` select `CloudKit` to ensure permissions are enabled.
                @Image(source: tut-MacPermissions.png, alt: "Xcode screenshot while adding Capabilities selections")
            }
            @Step { 
                For iOS, match permissions to this screenshot. In the `Signing & Capabilities` section, under `Add Background Modes` select `Uses Bluetooth LE accessories`. Under `iCloud` -> `Services` select `Key value storage`.
                @Image(source: tut-iOSPermissions.png, alt: "Xcode screenshot while adding Capabilities selections")
            }
        }
    }
    
    @Section(title: "The Core SDK Classes") {
        @ContentAndMedia {
            We will cover the three core classes: ``MetaWear/MetaWear``, ``MetaWear/MetaWearScanner``, and `MetaWearSyncStore`. 
            
            To help with debugging, the ``MetaWear/MWConsoleLogger`` can visualize Bluetooth communications.
            @Image(source: bird-red-yellow.png, alt: "Bird art")
        }
        @Steps {
            @Step { 
                Let's wire up the SDK inside the app's root object.
                @Code(name: "Root.swift", file: 01-root-01-01.swift) {}
            }    
            @Step { 
                The ``MetaWear/MetaWearScanner`` abstracts the CoreBluetooth framework for you, finding nearby ``MetaWear`` devices. 
                
                The ``MetaWear/MetaWearScanner/sharedRestore`` singleton enables CoreBluetooth to recognize this app and access previously used peripherals.
                @Code(name: "Root.swift", file: 01-root-01-02.swift, previousFile: 01-root-01-02_mask.swift) {}
            } 
            @Step { 
                To store names, capabilities, and other data about previously connected MetaWears, the scanner and other SDK components use `UserDefaults` storage. 
                
                **Note:** You can inspect the keys used and specify the container at `UserDefaults.MetaWear.suite`. By default, the SDK uses `.standard`. 
                @Code(name: "Root.swift", file: 01-root-01-03.swift) {}
            }
            @Step { 
                Apple randomizes Bluetooth device identifiers between devices and blocks advertised MAC addresses. 
    
                The `MetaWearSyncStore` allows you to stably identify MetaWears across devices by saving de-identifying metadata to iCloud key value storage, including a device's name, serial number, and sensor capabilities. If you choose to use this feature, you can obtain and manage MetaWears exclusively through the sync store, rather than the Scanner.
                @Code(name: "Root.swift", file: 01-root-01-04.swift) {}
            }
            @Step { 
                An iCloud key value store must be synchronized at launch to obtain the latest values.
                @Code(name: "Root.swift", file: 01-root-01-05.swift) {}
            }
            @Step { 
                When debugging, you might find the ``MetaWear/MWConsoleLogger`` helpful. If you set ``MetaWear/MWConsoleLogger/activateConsoleLoggingOnAllMetaWears`` to true at startup, all MetaWears will report activities (e.g., Bluetooth packets) to the console in Debug mode.
                
                **Tip:** _If you wish to log just one MetaWear, assign a delegate conforming to ``MetaWear/MWConsoleLoggerDelegate`` to its ``MetaWear/MetaWear/logDelegate`` property._
                @Code(name: "Root.swift", file: 01-root-01-06.swift) {}
            }
        }
    }
}
